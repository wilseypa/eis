//
//  Copyright (c) 2003 Launchbird Design Systems, Inc.
//  All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//    Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
//    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
//  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
//  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
//  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  
//  
//  Overview:
//  
//    Performs a radix 2 Fast Fourier Transform.
//    The FFT architecture is pipelined on a rank basis; each rank has its own butterfly and ranks are
//    isolated from each other using memory interleavers.  This FFT can perform calcualations on continuous
//    streaming data (one data set right after another).  More over, inputs and outputs are passed in pairs,
//    doubling the bandwidth.  For instance, a 2048 point FFT can perform a transform every 1024 cycles.
//  
//  Interface:
//  
//    Synchronization:
//      clock_c  : Clock input.
//      enable_i : Synchronous enable.
//      reset_i  : Synchronous reset.
//  
//    Inputs:
//      sync_i     : Input sync pulse must occur one frame prior to data input.
//      data_0_i   : Input data 0.  Width is 2 * precision.  Real on the left, imag on the right.
//      data_1_i   : Input data 1.  Width is 2 * precision.  Real on the left, imag on the right.
//  
//    Outputs:
//      sync_o     : Output sync pulse occurs one frame before data output.
//      data_0_o   : Output data 0.  Width is 2 * precision.  Real on the left, imag on the right.
//      data_1_o   : Output data 1.  Width is 2 * precision.  Real on the left, imag on the right.
//  
//  Built In Parameters:
//  
//    FFT Points   = 1024
//    Precision    = 18
//  
//  
//  
//  
//  Generated by Confluence 0.6.3  --  Launchbird Design Systems, Inc.  --  www.launchbird.com
//  
//  Build Date : Fri Aug 22 08:49:05 CDT 2003
//  
//  Interface
//  
//    Build Name    : cf_fft_1024_18
//    Clock Domains : clock_c  
//    Vector Input  : enable_i(1)
//    Vector Input  : reset_i(1)
//    Vector Input  : sync_i(1)
//    Vector Input  : data_0_i(36)
//    Vector Input  : data_1_i(36)
//    Vector Output : sync_o(1)
//    Vector Output : data_0_o(36)
//    Vector Output : data_1_o(36)
//  
//  
//  

`timescale 1 ns / 1 ns

module cf_fft_1024_18 (clock_c, enable_i, reset_i, sync_i, data_0_i, data_1_i, sync_o, data_0_o, data_1_o);
input  clock_c;
input  enable_i;
input  reset_i;
input  sync_i;
input  [35:0] data_0_i;
input  [35:0] data_1_i;
output sync_o;
output [35:0] data_0_o;
output [35:0] data_1_o;
wire   n1;
wire   [35:0] n2;
wire   [35:0] n3;
cf_fft_1024_18_1 s1 (clock_c, sync_i, data_0_i, data_1_i, enable_i, reset_i, n1, n2, n3);
assign sync_o = n1;
assign data_0_o = n2;
assign data_1_o = n3;
endmodule

module cf_fft_1024_18_1 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  [35:0] i2;
input  [35:0] i3;
input  i4;
input  i5;
output o1;
output [35:0] o2;
output [35:0] o3;
wire   s1_1;
wire   [35:0] s1_2;
wire   [35:0] s1_3;
wire   s2_1;
wire   [35:0] s2_2;
wire   [35:0] s2_3;
wire   s3_1;
wire   [35:0] s3_2;
wire   [35:0] s3_3;
wire   s4_1;
wire   [35:0] s4_2;
wire   [35:0] s4_3;
cf_fft_1024_18_23 s1 (clock_c, s3_1, s3_2, s3_3, i4, i5, s1_1, s1_2, s1_3);
cf_fft_1024_18_6 s2 (clock_c, s1_1, s1_2, s1_3, i4, i5, s2_1, s2_2, s2_3);
cf_fft_1024_18_5 s3 (clock_c, s4_1, s4_2, s4_3, i4, i5, s3_1, s3_2, s3_3);
cf_fft_1024_18_2 s4 (clock_c, i1, i2, i3, i4, i5, s4_1, s4_2, s4_3);
assign o3 = s2_3;
assign o2 = s2_2;
assign o1 = s2_1;
endmodule

module cf_fft_1024_18_2 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  [35:0] i2;
input  [35:0] i3;
input  i4;
input  i5;
output o1;
output [35:0] o2;
output [35:0] o3;
wire   [71:0] n1;
wire   n2;
wire   n3;
wire   [7:0] n4;
wire   [7:0] n5;
wire   [1:0] n6;
wire   [35:0] n7;
wire   [35:0] n8;
wire   [35:0] n9;
wire   [35:0] n10;
wire   [35:0] n11;
wire   [35:0] n12;
wire   s13_1;
wire   [71:0] s14_1;
wire   s15_1;
wire   s15_2;
wire   [71:0] s15_3;
wire   [8:0] s16_1;
wire   s16_2;
assign n1 = {i2, i3};
assign n2 = s16_1[8];
assign n3 = ~n2;
assign n4 = {s16_1[7],
  s16_1[6],
  s16_1[5],
  s16_1[4],
  s16_1[3],
  s16_1[2],
  s16_1[1],
  s16_1[0]};
assign n5 = {n4[0],
  n4[1],
  n4[2],
  n4[3],
  n4[4],
  n4[5],
  n4[6],
  n4[7]};
assign n6 = {s15_2, s15_1};
assign n7 = {s15_3[71],
  s15_3[70],
  s15_3[69],
  s15_3[68],
  s15_3[67],
  s15_3[66],
  s15_3[65],
  s15_3[64],
  s15_3[63],
  s15_3[62],
  s15_3[61],
  s15_3[60],
  s15_3[59],
  s15_3[58],
  s15_3[57],
  s15_3[56],
  s15_3[55],
  s15_3[54],
  s15_3[53],
  s15_3[52],
  s15_3[51],
  s15_3[50],
  s15_3[49],
  s15_3[48],
  s15_3[47],
  s15_3[46],
  s15_3[45],
  s15_3[44],
  s15_3[43],
  s15_3[42],
  s15_3[41],
  s15_3[40],
  s15_3[39],
  s15_3[38],
  s15_3[37],
  s15_3[36]};
assign n8 = {s15_3[35],
  s15_3[34],
  s15_3[33],
  s15_3[32],
  s15_3[31],
  s15_3[30],
  s15_3[29],
  s15_3[28],
  s15_3[27],
  s15_3[26],
  s15_3[25],
  s15_3[24],
  s15_3[23],
  s15_3[22],
  s15_3[21],
  s15_3[20],
  s15_3[19],
  s15_3[18],
  s15_3[17],
  s15_3[16],
  s15_3[15],
  s15_3[14],
  s15_3[13],
  s15_3[12],
  s15_3[11],
  s15_3[10],
  s15_3[9],
  s15_3[8],
  s15_3[7],
  s15_3[6],
  s15_3[5],
  s15_3[4],
  s15_3[3],
  s15_3[2],
  s15_3[1],
  s15_3[0]};
assign n9 = {s14_1[71],
  s14_1[70],
  s14_1[69],
  s14_1[68],
  s14_1[67],
  s14_1[66],
  s14_1[65],
  s14_1[64],
  s14_1[63],
  s14_1[62],
  s14_1[61],
  s14_1[60],
  s14_1[59],
  s14_1[58],
  s14_1[57],
  s14_1[56],
  s14_1[55],
  s14_1[54],
  s14_1[53],
  s14_1[52],
  s14_1[51],
  s14_1[50],
  s14_1[49],
  s14_1[48],
  s14_1[47],
  s14_1[46],
  s14_1[45],
  s14_1[44],
  s14_1[43],
  s14_1[42],
  s14_1[41],
  s14_1[40],
  s14_1[39],
  s14_1[38],
  s14_1[37],
  s14_1[36]};
assign n10 = {s14_1[35],
  s14_1[34],
  s14_1[33],
  s14_1[32],
  s14_1[31],
  s14_1[30],
  s14_1[29],
  s14_1[28],
  s14_1[27],
  s14_1[26],
  s14_1[25],
  s14_1[24],
  s14_1[23],
  s14_1[22],
  s14_1[21],
  s14_1[20],
  s14_1[19],
  s14_1[18],
  s14_1[17],
  s14_1[16],
  s14_1[15],
  s14_1[14],
  s14_1[13],
  s14_1[12],
  s14_1[11],
  s14_1[10],
  s14_1[9],
  s14_1[8],
  s14_1[7],
  s14_1[6],
  s14_1[5],
  s14_1[4],
  s14_1[3],
  s14_1[2],
  s14_1[1],
  s14_1[0]};
assign n11 = s13_1 ? n8 : n7;
assign n12 = s13_1 ? n10 : n9;
cf_fft_1024_18_33 s13 (clock_c, n6, i4, i5, s13_1);
cf_fft_1024_18_4 s14 (clock_c, s16_2, n1, n2, n5, i4, i5, s14_1);
cf_fft_1024_18_3 s15 (clock_c, s16_2, n1, n3, n5, i4, i5, s15_1, s15_2, s15_3);
cf_fft_1024_18_24 s16 (clock_c, i1, i4, i5, s16_1, s16_2);
assign o3 = n12;
assign o2 = n11;
assign o1 = s15_1;
endmodule

module cf_fft_1024_18_3 (clock_c, i1, i2, i3, i4, i5, i6, o1, o2, o3);
input  clock_c;
input  i1;
input  [71:0] i2;
input  i3;
input  [7:0] i4;
input  i5;
input  i6;
output o1;
output o2;
output [71:0] o3;
wire   [7:0] n1;
wire   [7:0] n2;
reg    [7:0] n3;
wire   n4;
reg    n5;
wire   [7:0] n6;
wire   n7;
wire   n8;
wire   [71:0] n9;
reg    [7:0] n9a;
reg    [71:0] n9m [255:0];
wire   n10;
wire   [71:0] n11;
reg    [7:0] n11a;
reg    [71:0] n11m [255:0];
reg    n12;
wire   [71:0] n13;
wire   n14;
wire   s15_1;
assign n1 = 8'b00000001;
assign n2 = n3 + n1;
initial n3 = 8'b00000000;
always @ (posedge clock_c)
  if (n14 == 1'b1)
    n3 <= 8'b00000000;
  else if (i5 == 1'b1)
    n3 <= n2;
assign n4 = ~s15_1;
initial n5 = 1'b0;
always @ (posedge clock_c)
  if (i6 == 1'b1)
    n5 <= 1'b0;
  else if (i5 == 1'b1)
    n5 <= i1;
assign n6 = 8'b00000000;
assign n7 = n3 == n6;
assign n8 = i3 & n4;
initial n9a = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1) begin
    if (n8 == 1'b1)
      n9m[i4] <= i2;
    n9a <= n3;
  end
assign n9 = n9m[n9a];
assign n10 = i3 & s15_1;
initial n11a = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1) begin
    if (n10 == 1'b1)
      n11m[i4] <= i2;
    n11a <= n3;
  end
assign n11 = n11m[n11a];
initial n12 = 1'b0;
always @ (posedge clock_c)
  if (i6 == 1'b1)
    n12 <= 1'b0;
  else if (i5 == 1'b1)
    n12 <= n4;
assign n13 = n12 ? n11 : n9;
assign n14 = i1 | i6;
cf_fft_1024_18_30 s15 (clock_c, i1, i5, i6, s15_1);
assign o3 = n13;
assign o2 = n7;
assign o1 = n5;
endmodule

module cf_fft_1024_18_4 (clock_c, i1, i2, i3, i4, i5, i6, o1);
input  clock_c;
input  i1;
input  [71:0] i2;
input  i3;
input  [7:0] i4;
input  i5;
input  i6;
output [71:0] o1;
wire   [7:0] n1;
wire   [7:0] n2;
reg    [7:0] n3;
wire   n4;
wire   n5;
wire   [71:0] n6;
reg    [7:0] n6a;
reg    [71:0] n6m [255:0];
wire   n7;
wire   [71:0] n8;
reg    [7:0] n8a;
reg    [71:0] n8m [255:0];
reg    n9;
wire   [71:0] n10;
wire   n11;
wire   s12_1;
assign n1 = 8'b00000001;
assign n2 = n3 + n1;
initial n3 = 8'b00000000;
always @ (posedge clock_c)
  if (n11 == 1'b1)
    n3 <= 8'b00000000;
  else if (i5 == 1'b1)
    n3 <= n2;
assign n4 = ~s12_1;
assign n5 = i3 & n4;
initial n6a = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1) begin
    if (n5 == 1'b1)
      n6m[i4] <= i2;
    n6a <= n3;
  end
assign n6 = n6m[n6a];
assign n7 = i3 & s12_1;
initial n8a = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1) begin
    if (n7 == 1'b1)
      n8m[i4] <= i2;
    n8a <= n3;
  end
assign n8 = n8m[n8a];
initial n9 = 1'b0;
always @ (posedge clock_c)
  if (i6 == 1'b1)
    n9 <= 1'b0;
  else if (i5 == 1'b1)
    n9 <= n4;
assign n10 = n9 ? n8 : n6;
assign n11 = i1 | i6;
cf_fft_1024_18_30 s12 (clock_c, i1, i5, i6, s12_1);
assign o1 = n10;
endmodule

module cf_fft_1024_18_5 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  [35:0] i2;
input  [35:0] i3;
input  i4;
input  i5;
output o1;
output [35:0] o2;
output [35:0] o3;
wire   n1;
wire   [71:0] n2;
reg    n3;
reg    n4;
reg    n5;
reg    n6;
wire   [7:0] n7;
reg    [7:0] n8;
reg    [7:0] n9;
reg    [7:0] n10;
reg    [7:0] n11;
wire   n12;
reg    n13;
reg    n14;
reg    n15;
reg    n16;
wire   n17;
wire   [1:0] n18;
wire   [35:0] n19;
wire   [35:0] n20;
wire   [35:0] n21;
wire   [35:0] n22;
wire   [35:0] n23;
wire   [35:0] n24;
wire   [35:0] s25_1;
wire   [35:0] s25_2;
wire   s26_1;
wire   [71:0] s27_1;
wire   s28_1;
wire   s28_2;
wire   [71:0] s28_3;
wire   [8:0] s29_1;
wire   s29_2;
assign n1 = 1'b0;
assign n2 = {s25_1, s25_2};
initial n3 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n3 <= 1'b0;
  else if (i4 == 1'b1)
    n3 <= s29_2;
initial n4 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n4 <= 1'b0;
  else if (i4 == 1'b1)
    n4 <= n3;
initial n5 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n5 <= 1'b0;
  else if (i4 == 1'b1)
    n5 <= n4;
initial n6 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n6 <= 1'b0;
  else if (i4 == 1'b1)
    n6 <= n5;
assign n7 = {s29_1[8],
  s29_1[7],
  s29_1[6],
  s29_1[5],
  s29_1[4],
  s29_1[3],
  s29_1[2],
  s29_1[1]};
initial n8 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n8 <= 8'b00000000;
  else if (i4 == 1'b1)
    n8 <= n7;
initial n9 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n9 <= 8'b00000000;
  else if (i4 == 1'b1)
    n9 <= n8;
initial n10 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n10 <= 8'b00000000;
  else if (i4 == 1'b1)
    n10 <= n9;
initial n11 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n11 <= 8'b00000000;
  else if (i4 == 1'b1)
    n11 <= n10;
assign n12 = s29_1[0];
initial n13 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n13 <= 1'b0;
  else if (i4 == 1'b1)
    n13 <= n12;
initial n14 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n14 <= 1'b0;
  else if (i4 == 1'b1)
    n14 <= n13;
initial n15 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n15 <= 1'b0;
  else if (i4 == 1'b1)
    n15 <= n14;
initial n16 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n16 <= 1'b0;
  else if (i4 == 1'b1)
    n16 <= n15;
assign n17 = ~n16;
assign n18 = {s28_2, s28_1};
assign n19 = {s28_3[71],
  s28_3[70],
  s28_3[69],
  s28_3[68],
  s28_3[67],
  s28_3[66],
  s28_3[65],
  s28_3[64],
  s28_3[63],
  s28_3[62],
  s28_3[61],
  s28_3[60],
  s28_3[59],
  s28_3[58],
  s28_3[57],
  s28_3[56],
  s28_3[55],
  s28_3[54],
  s28_3[53],
  s28_3[52],
  s28_3[51],
  s28_3[50],
  s28_3[49],
  s28_3[48],
  s28_3[47],
  s28_3[46],
  s28_3[45],
  s28_3[44],
  s28_3[43],
  s28_3[42],
  s28_3[41],
  s28_3[40],
  s28_3[39],
  s28_3[38],
  s28_3[37],
  s28_3[36]};
assign n20 = {s28_3[35],
  s28_3[34],
  s28_3[33],
  s28_3[32],
  s28_3[31],
  s28_3[30],
  s28_3[29],
  s28_3[28],
  s28_3[27],
  s28_3[26],
  s28_3[25],
  s28_3[24],
  s28_3[23],
  s28_3[22],
  s28_3[21],
  s28_3[20],
  s28_3[19],
  s28_3[18],
  s28_3[17],
  s28_3[16],
  s28_3[15],
  s28_3[14],
  s28_3[13],
  s28_3[12],
  s28_3[11],
  s28_3[10],
  s28_3[9],
  s28_3[8],
  s28_3[7],
  s28_3[6],
  s28_3[5],
  s28_3[4],
  s28_3[3],
  s28_3[2],
  s28_3[1],
  s28_3[0]};
assign n21 = {s27_1[71],
  s27_1[70],
  s27_1[69],
  s27_1[68],
  s27_1[67],
  s27_1[66],
  s27_1[65],
  s27_1[64],
  s27_1[63],
  s27_1[62],
  s27_1[61],
  s27_1[60],
  s27_1[59],
  s27_1[58],
  s27_1[57],
  s27_1[56],
  s27_1[55],
  s27_1[54],
  s27_1[53],
  s27_1[52],
  s27_1[51],
  s27_1[50],
  s27_1[49],
  s27_1[48],
  s27_1[47],
  s27_1[46],
  s27_1[45],
  s27_1[44],
  s27_1[43],
  s27_1[42],
  s27_1[41],
  s27_1[40],
  s27_1[39],
  s27_1[38],
  s27_1[37],
  s27_1[36]};
assign n22 = {s27_1[35],
  s27_1[34],
  s27_1[33],
  s27_1[32],
  s27_1[31],
  s27_1[30],
  s27_1[29],
  s27_1[28],
  s27_1[27],
  s27_1[26],
  s27_1[25],
  s27_1[24],
  s27_1[23],
  s27_1[22],
  s27_1[21],
  s27_1[20],
  s27_1[19],
  s27_1[18],
  s27_1[17],
  s27_1[16],
  s27_1[15],
  s27_1[14],
  s27_1[13],
  s27_1[12],
  s27_1[11],
  s27_1[10],
  s27_1[9],
  s27_1[8],
  s27_1[7],
  s27_1[6],
  s27_1[5],
  s27_1[4],
  s27_1[3],
  s27_1[2],
  s27_1[1],
  s27_1[0]};
assign n23 = s26_1 ? n20 : n19;
assign n24 = s26_1 ? n22 : n21;
cf_fft_1024_18_39 s25 (clock_c, i2, i3, n1, i4, i5, s25_1, s25_2);
cf_fft_1024_18_33 s26 (clock_c, n18, i4, i5, s26_1);
cf_fft_1024_18_29 s27 (clock_c, n2, n6, n11, n16, i4, i5, s27_1);
cf_fft_1024_18_28 s28 (clock_c, n2, n6, n11, n17, i4, i5, s28_1, s28_2, s28_3);
cf_fft_1024_18_24 s29 (clock_c, i1, i4, i5, s29_1, s29_2);
assign o3 = n24;
assign o2 = n23;
assign o1 = s28_1;
endmodule

module cf_fft_1024_18_6 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  [35:0] i2;
input  [35:0] i3;
input  i4;
input  i5;
output o1;
output [35:0] o2;
output [35:0] o3;
wire   s1_1;
wire   [35:0] s1_2;
wire   [35:0] s1_3;
wire   s2_1;
wire   [35:0] s2_2;
wire   [35:0] s2_3;
wire   s3_1;
wire   [35:0] s3_2;
wire   [35:0] s3_3;
wire   s4_1;
wire   [35:0] s4_2;
wire   [35:0] s4_3;
wire   s5_1;
wire   [35:0] s5_2;
wire   [35:0] s5_3;
wire   s6_1;
wire   [35:0] s6_2;
wire   [35:0] s6_3;
wire   s7_1;
wire   [35:0] s7_2;
wire   [35:0] s7_3;
wire   s8_1;
wire   [35:0] s8_2;
wire   [35:0] s8_3;
cf_fft_1024_18_21 s1 (clock_c, s2_1, s2_2, s2_3, i4, i5, s1_1, s1_2, s1_3);
cf_fft_1024_18_19 s2 (clock_c, s3_1, s3_2, s3_3, i4, i5, s2_1, s2_2, s2_3);
cf_fft_1024_18_17 s3 (clock_c, s4_1, s4_2, s4_3, i4, i5, s3_1, s3_2, s3_3);
cf_fft_1024_18_15 s4 (clock_c, s5_1, s5_2, s5_3, i4, i5, s4_1, s4_2, s4_3);
cf_fft_1024_18_13 s5 (clock_c, s6_1, s6_2, s6_3, i4, i5, s5_1, s5_2, s5_3);
cf_fft_1024_18_11 s6 (clock_c, s7_1, s7_2, s7_3, i4, i5, s6_1, s6_2, s6_3);
cf_fft_1024_18_9 s7 (clock_c, s8_1, s8_2, s8_3, i4, i5, s7_1, s7_2, s7_3);
cf_fft_1024_18_7 s8 (clock_c, i1, i2, i3, i4, i5, s8_1, s8_2, s8_3);
assign o3 = s1_3;
assign o2 = s1_2;
assign o1 = s1_1;
endmodule

module cf_fft_1024_18_7 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  [35:0] i2;
input  [35:0] i3;
input  i4;
input  i5;
output o1;
output [35:0] o2;
output [35:0] o3;
wire   [1:0] n1;
wire   [71:0] n2;
reg    n3;
reg    n4;
reg    n5;
reg    n6;
wire   [7:0] n7;
reg    [7:0] n8;
reg    [7:0] n9;
reg    [7:0] n10;
reg    [7:0] n11;
wire   n12;
reg    n13;
reg    n14;
reg    n15;
reg    n16;
wire   n17;
wire   [1:0] n18;
wire   [35:0] n19;
wire   [35:0] n20;
wire   [35:0] n21;
wire   [35:0] n22;
wire   [35:0] n23;
wire   [35:0] n24;
wire   [35:0] s25_1;
wire   [35:0] s25_2;
wire   s26_1;
wire   s27_1;
wire   s27_2;
wire   [71:0] s27_3;
wire   [71:0] s28_1;
wire   [8:0] s29_1;
wire   s29_2;
assign n1 = {s29_1[8],
  s29_1[7]};
assign n2 = {s25_1, s25_2};
initial n3 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n3 <= 1'b0;
  else if (i4 == 1'b1)
    n3 <= s29_2;
initial n4 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n4 <= 1'b0;
  else if (i4 == 1'b1)
    n4 <= n3;
initial n5 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n5 <= 1'b0;
  else if (i4 == 1'b1)
    n5 <= n4;
initial n6 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n6 <= 1'b0;
  else if (i4 == 1'b1)
    n6 <= n5;
assign n7 = {s29_1[8],
  s29_1[7],
  s29_1[6],
  s29_1[5],
  s29_1[4],
  s29_1[3],
  s29_1[2],
  s29_1[1]};
initial n8 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n8 <= 8'b00000000;
  else if (i4 == 1'b1)
    n8 <= n7;
initial n9 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n9 <= 8'b00000000;
  else if (i4 == 1'b1)
    n9 <= n8;
initial n10 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n10 <= 8'b00000000;
  else if (i4 == 1'b1)
    n10 <= n9;
initial n11 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n11 <= 8'b00000000;
  else if (i4 == 1'b1)
    n11 <= n10;
assign n12 = s29_1[0];
initial n13 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n13 <= 1'b0;
  else if (i4 == 1'b1)
    n13 <= n12;
initial n14 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n14 <= 1'b0;
  else if (i4 == 1'b1)
    n14 <= n13;
initial n15 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n15 <= 1'b0;
  else if (i4 == 1'b1)
    n15 <= n14;
initial n16 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n16 <= 1'b0;
  else if (i4 == 1'b1)
    n16 <= n15;
assign n17 = ~n16;
assign n18 = {s27_2, s27_1};
assign n19 = {s27_3[71],
  s27_3[70],
  s27_3[69],
  s27_3[68],
  s27_3[67],
  s27_3[66],
  s27_3[65],
  s27_3[64],
  s27_3[63],
  s27_3[62],
  s27_3[61],
  s27_3[60],
  s27_3[59],
  s27_3[58],
  s27_3[57],
  s27_3[56],
  s27_3[55],
  s27_3[54],
  s27_3[53],
  s27_3[52],
  s27_3[51],
  s27_3[50],
  s27_3[49],
  s27_3[48],
  s27_3[47],
  s27_3[46],
  s27_3[45],
  s27_3[44],
  s27_3[43],
  s27_3[42],
  s27_3[41],
  s27_3[40],
  s27_3[39],
  s27_3[38],
  s27_3[37],
  s27_3[36]};
assign n20 = {s27_3[35],
  s27_3[34],
  s27_3[33],
  s27_3[32],
  s27_3[31],
  s27_3[30],
  s27_3[29],
  s27_3[28],
  s27_3[27],
  s27_3[26],
  s27_3[25],
  s27_3[24],
  s27_3[23],
  s27_3[22],
  s27_3[21],
  s27_3[20],
  s27_3[19],
  s27_3[18],
  s27_3[17],
  s27_3[16],
  s27_3[15],
  s27_3[14],
  s27_3[13],
  s27_3[12],
  s27_3[11],
  s27_3[10],
  s27_3[9],
  s27_3[8],
  s27_3[7],
  s27_3[6],
  s27_3[5],
  s27_3[4],
  s27_3[3],
  s27_3[2],
  s27_3[1],
  s27_3[0]};
assign n21 = {s28_1[71],
  s28_1[70],
  s28_1[69],
  s28_1[68],
  s28_1[67],
  s28_1[66],
  s28_1[65],
  s28_1[64],
  s28_1[63],
  s28_1[62],
  s28_1[61],
  s28_1[60],
  s28_1[59],
  s28_1[58],
  s28_1[57],
  s28_1[56],
  s28_1[55],
  s28_1[54],
  s28_1[53],
  s28_1[52],
  s28_1[51],
  s28_1[50],
  s28_1[49],
  s28_1[48],
  s28_1[47],
  s28_1[46],
  s28_1[45],
  s28_1[44],
  s28_1[43],
  s28_1[42],
  s28_1[41],
  s28_1[40],
  s28_1[39],
  s28_1[38],
  s28_1[37],
  s28_1[36]};
assign n22 = {s28_1[35],
  s28_1[34],
  s28_1[33],
  s28_1[32],
  s28_1[31],
  s28_1[30],
  s28_1[29],
  s28_1[28],
  s28_1[27],
  s28_1[26],
  s28_1[25],
  s28_1[24],
  s28_1[23],
  s28_1[22],
  s28_1[21],
  s28_1[20],
  s28_1[19],
  s28_1[18],
  s28_1[17],
  s28_1[16],
  s28_1[15],
  s28_1[14],
  s28_1[13],
  s28_1[12],
  s28_1[11],
  s28_1[10],
  s28_1[9],
  s28_1[8],
  s28_1[7],
  s28_1[6],
  s28_1[5],
  s28_1[4],
  s28_1[3],
  s28_1[2],
  s28_1[1],
  s28_1[0]};
assign n23 = s26_1 ? n20 : n19;
assign n24 = s26_1 ? n22 : n21;
cf_fft_1024_18_8 s25 (clock_c, i2, i3, n1, i4, i5, s25_1, s25_2);
cf_fft_1024_18_33 s26 (clock_c, n18, i4, i5, s26_1);
cf_fft_1024_18_28 s27 (clock_c, n2, n6, n11, n17, i4, i5, s27_1, s27_2, s27_3);
cf_fft_1024_18_29 s28 (clock_c, n2, n6, n11, n16, i4, i5, s28_1);
cf_fft_1024_18_24 s29 (clock_c, i1, i4, i5, s29_1, s29_2);
assign o3 = n24;
assign o2 = n23;
assign o1 = s27_1;
endmodule

module cf_fft_1024_18_8 (clock_c, i1, i2, i3, i4, i5, o1, o2);
input  clock_c;
input  [35:0] i1;
input  [35:0] i2;
input  [1:0] i3;
input  i4;
input  i5;
output [35:0] o1;
output [35:0] o2;
reg    [35:0] n1;
wire   [17:0] n2;
wire   [17:0] n3;
reg    [35:0] n4;
wire   [17:0] n5;
wire   [17:0] n6;
reg    [17:0] n7;
reg    [17:0] n8;
reg    [17:0] n9;
reg    [17:0] n10;
reg    [35:0] n11;
wire   [17:0] n12;
wire   [17:0] n13;
wire   [35:0] n14;
wire   [17:0] n15;
reg    [17:0] n16;
wire   [35:0] n17;
wire   [17:0] n18;
reg    [17:0] n19;
wire   [17:0] n20;
reg    [17:0] n21;
wire   [35:0] n22;
wire   [17:0] n23;
reg    [17:0] n24;
wire   [35:0] n25;
wire   [17:0] n26;
reg    [17:0] n27;
wire   [17:0] n28;
reg    [17:0] n29;
wire   [17:0] n30;
wire   [17:0] n31;
wire   [35:0] n32;
reg    [35:0] n33;
wire   [17:0] n34;
wire   [17:0] n35;
wire   [35:0] n36;
reg    [35:0] n37;
initial n1 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n1 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n1 <= i1;
assign n2 = {n1[35],
  n1[34],
  n1[33],
  n1[32],
  n1[31],
  n1[30],
  n1[29],
  n1[28],
  n1[27],
  n1[26],
  n1[25],
  n1[24],
  n1[23],
  n1[22],
  n1[21],
  n1[20],
  n1[19],
  n1[18]};
assign n3 = {n1[17],
  n1[16],
  n1[15],
  n1[14],
  n1[13],
  n1[12],
  n1[11],
  n1[10],
  n1[9],
  n1[8],
  n1[7],
  n1[6],
  n1[5],
  n1[4],
  n1[3],
  n1[2],
  n1[1],
  n1[0]};
initial n4 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n4 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n4 <= i2;
assign n5 = {n4[35],
  n4[34],
  n4[33],
  n4[32],
  n4[31],
  n4[30],
  n4[29],
  n4[28],
  n4[27],
  n4[26],
  n4[25],
  n4[24],
  n4[23],
  n4[22],
  n4[21],
  n4[20],
  n4[19],
  n4[18]};
assign n6 = {n4[17],
  n4[16],
  n4[15],
  n4[14],
  n4[13],
  n4[12],
  n4[11],
  n4[10],
  n4[9],
  n4[8],
  n4[7],
  n4[6],
  n4[5],
  n4[4],
  n4[3],
  n4[2],
  n4[1],
  n4[0]};
initial n7 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n7 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n7 <= n2;
initial n8 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n8 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n8 <= n7;
initial n9 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n9 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n9 <= n3;
initial n10 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n10 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n10 <= n9;
initial n11 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i4 == 1'b1)
    case (i3)
      2'b00 : n11 <= 36'b011111111111111111000000000000000000;
      2'b01 : n11 <= 36'b010110101000001001101001010111110110;
      2'b10 : n11 <= 36'b000000000000000000100000000000000000;
      2'b11 : n11 <= 36'b101001010111110110101001010111110110;
      default : n11 <= 36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    endcase
assign n12 = {n11[35],
  n11[34],
  n11[33],
  n11[32],
  n11[31],
  n11[30],
  n11[29],
  n11[28],
  n11[27],
  n11[26],
  n11[25],
  n11[24],
  n11[23],
  n11[22],
  n11[21],
  n11[20],
  n11[19],
  n11[18]};
assign n13 = {n11[17],
  n11[16],
  n11[15],
  n11[14],
  n11[13],
  n11[12],
  n11[11],
  n11[10],
  n11[9],
  n11[8],
  n11[7],
  n11[6],
  n11[5],
  n11[4],
  n11[3],
  n11[2],
  n11[1],
  n11[0]};
assign n14 = {{18{n5[17]}}, n5} * {{18{n12[17]}}, n12};
assign n15 = {n14[34],
  n14[33],
  n14[32],
  n14[31],
  n14[30],
  n14[29],
  n14[28],
  n14[27],
  n14[26],
  n14[25],
  n14[24],
  n14[23],
  n14[22],
  n14[21],
  n14[20],
  n14[19],
  n14[18],
  n14[17]};
initial n16 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n16 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n16 <= n15;
assign n17 = {{18{n6[17]}}, n6} * {{18{n13[17]}}, n13};
assign n18 = {n17[34],
  n17[33],
  n17[32],
  n17[31],
  n17[30],
  n17[29],
  n17[28],
  n17[27],
  n17[26],
  n17[25],
  n17[24],
  n17[23],
  n17[22],
  n17[21],
  n17[20],
  n17[19],
  n17[18],
  n17[17]};
initial n19 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n19 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n19 <= n18;
assign n20 = n16 - n19;
initial n21 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n21 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n21 <= n20;
assign n22 = {{18{n5[17]}}, n5} * {{18{n13[17]}}, n13};
assign n23 = {n22[34],
  n22[33],
  n22[32],
  n22[31],
  n22[30],
  n22[29],
  n22[28],
  n22[27],
  n22[26],
  n22[25],
  n22[24],
  n22[23],
  n22[22],
  n22[21],
  n22[20],
  n22[19],
  n22[18],
  n22[17]};
initial n24 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n24 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n24 <= n23;
assign n25 = {{18{n6[17]}}, n6} * {{18{n12[17]}}, n12};
assign n26 = {n25[34],
  n25[33],
  n25[32],
  n25[31],
  n25[30],
  n25[29],
  n25[28],
  n25[27],
  n25[26],
  n25[25],
  n25[24],
  n25[23],
  n25[22],
  n25[21],
  n25[20],
  n25[19],
  n25[18],
  n25[17]};
initial n27 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n27 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n27 <= n26;
assign n28 = n24 + n27;
initial n29 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n29 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n29 <= n28;
assign n30 = n8 + n21;
assign n31 = n10 + n29;
assign n32 = {n30, n31};
initial n33 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n33 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n33 <= n32;
assign n34 = n8 - n21;
assign n35 = n10 - n29;
assign n36 = {n34, n35};
initial n37 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n37 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n37 <= n36;
assign o2 = n37;
assign o1 = n33;
endmodule

module cf_fft_1024_18_9 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  [35:0] i2;
input  [35:0] i3;
input  i4;
input  i5;
output o1;
output [35:0] o2;
output [35:0] o3;
wire   [2:0] n1;
wire   [71:0] n2;
reg    n3;
reg    n4;
reg    n5;
reg    n6;
wire   [7:0] n7;
reg    [7:0] n8;
reg    [7:0] n9;
reg    [7:0] n10;
reg    [7:0] n11;
wire   n12;
reg    n13;
reg    n14;
reg    n15;
reg    n16;
wire   n17;
wire   [1:0] n18;
wire   [35:0] n19;
wire   [35:0] n20;
wire   [35:0] n21;
wire   [35:0] n22;
wire   [35:0] n23;
wire   [35:0] n24;
wire   s25_1;
wire   [35:0] s26_1;
wire   [35:0] s26_2;
wire   [8:0] s27_1;
wire   s27_2;
wire   s28_1;
wire   s28_2;
wire   [71:0] s28_3;
wire   [71:0] s29_1;
assign n1 = {s27_1[8],
  s27_1[7],
  s27_1[6]};
assign n2 = {s26_1, s26_2};
initial n3 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n3 <= 1'b0;
  else if (i4 == 1'b1)
    n3 <= s27_2;
initial n4 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n4 <= 1'b0;
  else if (i4 == 1'b1)
    n4 <= n3;
initial n5 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n5 <= 1'b0;
  else if (i4 == 1'b1)
    n5 <= n4;
initial n6 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n6 <= 1'b0;
  else if (i4 == 1'b1)
    n6 <= n5;
assign n7 = {s27_1[8],
  s27_1[7],
  s27_1[6],
  s27_1[5],
  s27_1[4],
  s27_1[3],
  s27_1[2],
  s27_1[1]};
initial n8 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n8 <= 8'b00000000;
  else if (i4 == 1'b1)
    n8 <= n7;
initial n9 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n9 <= 8'b00000000;
  else if (i4 == 1'b1)
    n9 <= n8;
initial n10 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n10 <= 8'b00000000;
  else if (i4 == 1'b1)
    n10 <= n9;
initial n11 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n11 <= 8'b00000000;
  else if (i4 == 1'b1)
    n11 <= n10;
assign n12 = s27_1[0];
initial n13 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n13 <= 1'b0;
  else if (i4 == 1'b1)
    n13 <= n12;
initial n14 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n14 <= 1'b0;
  else if (i4 == 1'b1)
    n14 <= n13;
initial n15 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n15 <= 1'b0;
  else if (i4 == 1'b1)
    n15 <= n14;
initial n16 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n16 <= 1'b0;
  else if (i4 == 1'b1)
    n16 <= n15;
assign n17 = ~n16;
assign n18 = {s28_2, s28_1};
assign n19 = {s28_3[71],
  s28_3[70],
  s28_3[69],
  s28_3[68],
  s28_3[67],
  s28_3[66],
  s28_3[65],
  s28_3[64],
  s28_3[63],
  s28_3[62],
  s28_3[61],
  s28_3[60],
  s28_3[59],
  s28_3[58],
  s28_3[57],
  s28_3[56],
  s28_3[55],
  s28_3[54],
  s28_3[53],
  s28_3[52],
  s28_3[51],
  s28_3[50],
  s28_3[49],
  s28_3[48],
  s28_3[47],
  s28_3[46],
  s28_3[45],
  s28_3[44],
  s28_3[43],
  s28_3[42],
  s28_3[41],
  s28_3[40],
  s28_3[39],
  s28_3[38],
  s28_3[37],
  s28_3[36]};
assign n20 = {s28_3[35],
  s28_3[34],
  s28_3[33],
  s28_3[32],
  s28_3[31],
  s28_3[30],
  s28_3[29],
  s28_3[28],
  s28_3[27],
  s28_3[26],
  s28_3[25],
  s28_3[24],
  s28_3[23],
  s28_3[22],
  s28_3[21],
  s28_3[20],
  s28_3[19],
  s28_3[18],
  s28_3[17],
  s28_3[16],
  s28_3[15],
  s28_3[14],
  s28_3[13],
  s28_3[12],
  s28_3[11],
  s28_3[10],
  s28_3[9],
  s28_3[8],
  s28_3[7],
  s28_3[6],
  s28_3[5],
  s28_3[4],
  s28_3[3],
  s28_3[2],
  s28_3[1],
  s28_3[0]};
assign n21 = {s29_1[71],
  s29_1[70],
  s29_1[69],
  s29_1[68],
  s29_1[67],
  s29_1[66],
  s29_1[65],
  s29_1[64],
  s29_1[63],
  s29_1[62],
  s29_1[61],
  s29_1[60],
  s29_1[59],
  s29_1[58],
  s29_1[57],
  s29_1[56],
  s29_1[55],
  s29_1[54],
  s29_1[53],
  s29_1[52],
  s29_1[51],
  s29_1[50],
  s29_1[49],
  s29_1[48],
  s29_1[47],
  s29_1[46],
  s29_1[45],
  s29_1[44],
  s29_1[43],
  s29_1[42],
  s29_1[41],
  s29_1[40],
  s29_1[39],
  s29_1[38],
  s29_1[37],
  s29_1[36]};
assign n22 = {s29_1[35],
  s29_1[34],
  s29_1[33],
  s29_1[32],
  s29_1[31],
  s29_1[30],
  s29_1[29],
  s29_1[28],
  s29_1[27],
  s29_1[26],
  s29_1[25],
  s29_1[24],
  s29_1[23],
  s29_1[22],
  s29_1[21],
  s29_1[20],
  s29_1[19],
  s29_1[18],
  s29_1[17],
  s29_1[16],
  s29_1[15],
  s29_1[14],
  s29_1[13],
  s29_1[12],
  s29_1[11],
  s29_1[10],
  s29_1[9],
  s29_1[8],
  s29_1[7],
  s29_1[6],
  s29_1[5],
  s29_1[4],
  s29_1[3],
  s29_1[2],
  s29_1[1],
  s29_1[0]};
assign n23 = s25_1 ? n20 : n19;
assign n24 = s25_1 ? n22 : n21;
cf_fft_1024_18_33 s25 (clock_c, n18, i4, i5, s25_1);
cf_fft_1024_18_10 s26 (clock_c, i2, i3, n1, i4, i5, s26_1, s26_2);
cf_fft_1024_18_24 s27 (clock_c, i1, i4, i5, s27_1, s27_2);
cf_fft_1024_18_28 s28 (clock_c, n2, n6, n11, n17, i4, i5, s28_1, s28_2, s28_3);
cf_fft_1024_18_29 s29 (clock_c, n2, n6, n11, n16, i4, i5, s29_1);
assign o3 = n24;
assign o2 = n23;
assign o1 = s28_1;
endmodule

module cf_fft_1024_18_10 (clock_c, i1, i2, i3, i4, i5, o1, o2);
input  clock_c;
input  [35:0] i1;
input  [35:0] i2;
input  [2:0] i3;
input  i4;
input  i5;
output [35:0] o1;
output [35:0] o2;
reg    [35:0] n1;
wire   [17:0] n2;
wire   [17:0] n3;
reg    [35:0] n4;
wire   [17:0] n5;
wire   [17:0] n6;
reg    [17:0] n7;
reg    [17:0] n8;
reg    [17:0] n9;
reg    [17:0] n10;
reg    [35:0] n11;
wire   [17:0] n12;
wire   [17:0] n13;
wire   [35:0] n14;
wire   [17:0] n15;
reg    [17:0] n16;
wire   [35:0] n17;
wire   [17:0] n18;
reg    [17:0] n19;
wire   [17:0] n20;
reg    [17:0] n21;
wire   [35:0] n22;
wire   [17:0] n23;
reg    [17:0] n24;
wire   [35:0] n25;
wire   [17:0] n26;
reg    [17:0] n27;
wire   [17:0] n28;
reg    [17:0] n29;
wire   [17:0] n30;
wire   [17:0] n31;
wire   [35:0] n32;
reg    [35:0] n33;
wire   [17:0] n34;
wire   [17:0] n35;
wire   [35:0] n36;
reg    [35:0] n37;
initial n1 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n1 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n1 <= i1;
assign n2 = {n1[35],
  n1[34],
  n1[33],
  n1[32],
  n1[31],
  n1[30],
  n1[29],
  n1[28],
  n1[27],
  n1[26],
  n1[25],
  n1[24],
  n1[23],
  n1[22],
  n1[21],
  n1[20],
  n1[19],
  n1[18]};
assign n3 = {n1[17],
  n1[16],
  n1[15],
  n1[14],
  n1[13],
  n1[12],
  n1[11],
  n1[10],
  n1[9],
  n1[8],
  n1[7],
  n1[6],
  n1[5],
  n1[4],
  n1[3],
  n1[2],
  n1[1],
  n1[0]};
initial n4 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n4 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n4 <= i2;
assign n5 = {n4[35],
  n4[34],
  n4[33],
  n4[32],
  n4[31],
  n4[30],
  n4[29],
  n4[28],
  n4[27],
  n4[26],
  n4[25],
  n4[24],
  n4[23],
  n4[22],
  n4[21],
  n4[20],
  n4[19],
  n4[18]};
assign n6 = {n4[17],
  n4[16],
  n4[15],
  n4[14],
  n4[13],
  n4[12],
  n4[11],
  n4[10],
  n4[9],
  n4[8],
  n4[7],
  n4[6],
  n4[5],
  n4[4],
  n4[3],
  n4[2],
  n4[1],
  n4[0]};
initial n7 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n7 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n7 <= n2;
initial n8 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n8 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n8 <= n7;
initial n9 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n9 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n9 <= n3;
initial n10 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n10 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n10 <= n9;
initial n11 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i4 == 1'b1)
    case (i3)
      3'b000 : n11 <= 36'b011111111111111111000000000000000000;
      3'b001 : n11 <= 36'b011101100100000110110011110000010000;
      3'b010 : n11 <= 36'b010110101000001001101001010111110110;
      3'b011 : n11 <= 36'b001100001111101111100010011011111001;
      3'b100 : n11 <= 36'b000000000000000000100000000000000000;
      3'b101 : n11 <= 36'b110011110000010000100010011011111001;
      3'b110 : n11 <= 36'b101001010111110110101001010111110110;
      3'b111 : n11 <= 36'b100010011011111001110011110000010000;
      default : n11 <= 36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    endcase
assign n12 = {n11[35],
  n11[34],
  n11[33],
  n11[32],
  n11[31],
  n11[30],
  n11[29],
  n11[28],
  n11[27],
  n11[26],
  n11[25],
  n11[24],
  n11[23],
  n11[22],
  n11[21],
  n11[20],
  n11[19],
  n11[18]};
assign n13 = {n11[17],
  n11[16],
  n11[15],
  n11[14],
  n11[13],
  n11[12],
  n11[11],
  n11[10],
  n11[9],
  n11[8],
  n11[7],
  n11[6],
  n11[5],
  n11[4],
  n11[3],
  n11[2],
  n11[1],
  n11[0]};
assign n14 = {{18{n5[17]}}, n5} * {{18{n12[17]}}, n12};
assign n15 = {n14[34],
  n14[33],
  n14[32],
  n14[31],
  n14[30],
  n14[29],
  n14[28],
  n14[27],
  n14[26],
  n14[25],
  n14[24],
  n14[23],
  n14[22],
  n14[21],
  n14[20],
  n14[19],
  n14[18],
  n14[17]};
initial n16 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n16 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n16 <= n15;
assign n17 = {{18{n6[17]}}, n6} * {{18{n13[17]}}, n13};
assign n18 = {n17[34],
  n17[33],
  n17[32],
  n17[31],
  n17[30],
  n17[29],
  n17[28],
  n17[27],
  n17[26],
  n17[25],
  n17[24],
  n17[23],
  n17[22],
  n17[21],
  n17[20],
  n17[19],
  n17[18],
  n17[17]};
initial n19 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n19 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n19 <= n18;
assign n20 = n16 - n19;
initial n21 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n21 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n21 <= n20;
assign n22 = {{18{n5[17]}}, n5} * {{18{n13[17]}}, n13};
assign n23 = {n22[34],
  n22[33],
  n22[32],
  n22[31],
  n22[30],
  n22[29],
  n22[28],
  n22[27],
  n22[26],
  n22[25],
  n22[24],
  n22[23],
  n22[22],
  n22[21],
  n22[20],
  n22[19],
  n22[18],
  n22[17]};
initial n24 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n24 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n24 <= n23;
assign n25 = {{18{n6[17]}}, n6} * {{18{n12[17]}}, n12};
assign n26 = {n25[34],
  n25[33],
  n25[32],
  n25[31],
  n25[30],
  n25[29],
  n25[28],
  n25[27],
  n25[26],
  n25[25],
  n25[24],
  n25[23],
  n25[22],
  n25[21],
  n25[20],
  n25[19],
  n25[18],
  n25[17]};
initial n27 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n27 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n27 <= n26;
assign n28 = n24 + n27;
initial n29 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n29 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n29 <= n28;
assign n30 = n8 + n21;
assign n31 = n10 + n29;
assign n32 = {n30, n31};
initial n33 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n33 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n33 <= n32;
assign n34 = n8 - n21;
assign n35 = n10 - n29;
assign n36 = {n34, n35};
initial n37 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n37 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n37 <= n36;
assign o2 = n37;
assign o1 = n33;
endmodule

module cf_fft_1024_18_11 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  [35:0] i2;
input  [35:0] i3;
input  i4;
input  i5;
output o1;
output [35:0] o2;
output [35:0] o3;
wire   [3:0] n1;
wire   [71:0] n2;
reg    n3;
reg    n4;
reg    n5;
reg    n6;
wire   [7:0] n7;
reg    [7:0] n8;
reg    [7:0] n9;
reg    [7:0] n10;
reg    [7:0] n11;
wire   n12;
reg    n13;
reg    n14;
reg    n15;
reg    n16;
wire   n17;
wire   [1:0] n18;
wire   [35:0] n19;
wire   [35:0] n20;
wire   [35:0] n21;
wire   [35:0] n22;
wire   [35:0] n23;
wire   [35:0] n24;
wire   s25_1;
wire   [35:0] s26_1;
wire   [35:0] s26_2;
wire   [8:0] s27_1;
wire   s27_2;
wire   s28_1;
wire   s28_2;
wire   [71:0] s28_3;
wire   [71:0] s29_1;
assign n1 = {s27_1[8],
  s27_1[7],
  s27_1[6],
  s27_1[5]};
assign n2 = {s26_1, s26_2};
initial n3 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n3 <= 1'b0;
  else if (i4 == 1'b1)
    n3 <= s27_2;
initial n4 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n4 <= 1'b0;
  else if (i4 == 1'b1)
    n4 <= n3;
initial n5 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n5 <= 1'b0;
  else if (i4 == 1'b1)
    n5 <= n4;
initial n6 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n6 <= 1'b0;
  else if (i4 == 1'b1)
    n6 <= n5;
assign n7 = {s27_1[8],
  s27_1[7],
  s27_1[6],
  s27_1[5],
  s27_1[4],
  s27_1[3],
  s27_1[2],
  s27_1[1]};
initial n8 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n8 <= 8'b00000000;
  else if (i4 == 1'b1)
    n8 <= n7;
initial n9 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n9 <= 8'b00000000;
  else if (i4 == 1'b1)
    n9 <= n8;
initial n10 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n10 <= 8'b00000000;
  else if (i4 == 1'b1)
    n10 <= n9;
initial n11 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n11 <= 8'b00000000;
  else if (i4 == 1'b1)
    n11 <= n10;
assign n12 = s27_1[0];
initial n13 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n13 <= 1'b0;
  else if (i4 == 1'b1)
    n13 <= n12;
initial n14 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n14 <= 1'b0;
  else if (i4 == 1'b1)
    n14 <= n13;
initial n15 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n15 <= 1'b0;
  else if (i4 == 1'b1)
    n15 <= n14;
initial n16 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n16 <= 1'b0;
  else if (i4 == 1'b1)
    n16 <= n15;
assign n17 = ~n16;
assign n18 = {s28_2, s28_1};
assign n19 = {s28_3[71],
  s28_3[70],
  s28_3[69],
  s28_3[68],
  s28_3[67],
  s28_3[66],
  s28_3[65],
  s28_3[64],
  s28_3[63],
  s28_3[62],
  s28_3[61],
  s28_3[60],
  s28_3[59],
  s28_3[58],
  s28_3[57],
  s28_3[56],
  s28_3[55],
  s28_3[54],
  s28_3[53],
  s28_3[52],
  s28_3[51],
  s28_3[50],
  s28_3[49],
  s28_3[48],
  s28_3[47],
  s28_3[46],
  s28_3[45],
  s28_3[44],
  s28_3[43],
  s28_3[42],
  s28_3[41],
  s28_3[40],
  s28_3[39],
  s28_3[38],
  s28_3[37],
  s28_3[36]};
assign n20 = {s28_3[35],
  s28_3[34],
  s28_3[33],
  s28_3[32],
  s28_3[31],
  s28_3[30],
  s28_3[29],
  s28_3[28],
  s28_3[27],
  s28_3[26],
  s28_3[25],
  s28_3[24],
  s28_3[23],
  s28_3[22],
  s28_3[21],
  s28_3[20],
  s28_3[19],
  s28_3[18],
  s28_3[17],
  s28_3[16],
  s28_3[15],
  s28_3[14],
  s28_3[13],
  s28_3[12],
  s28_3[11],
  s28_3[10],
  s28_3[9],
  s28_3[8],
  s28_3[7],
  s28_3[6],
  s28_3[5],
  s28_3[4],
  s28_3[3],
  s28_3[2],
  s28_3[1],
  s28_3[0]};
assign n21 = {s29_1[71],
  s29_1[70],
  s29_1[69],
  s29_1[68],
  s29_1[67],
  s29_1[66],
  s29_1[65],
  s29_1[64],
  s29_1[63],
  s29_1[62],
  s29_1[61],
  s29_1[60],
  s29_1[59],
  s29_1[58],
  s29_1[57],
  s29_1[56],
  s29_1[55],
  s29_1[54],
  s29_1[53],
  s29_1[52],
  s29_1[51],
  s29_1[50],
  s29_1[49],
  s29_1[48],
  s29_1[47],
  s29_1[46],
  s29_1[45],
  s29_1[44],
  s29_1[43],
  s29_1[42],
  s29_1[41],
  s29_1[40],
  s29_1[39],
  s29_1[38],
  s29_1[37],
  s29_1[36]};
assign n22 = {s29_1[35],
  s29_1[34],
  s29_1[33],
  s29_1[32],
  s29_1[31],
  s29_1[30],
  s29_1[29],
  s29_1[28],
  s29_1[27],
  s29_1[26],
  s29_1[25],
  s29_1[24],
  s29_1[23],
  s29_1[22],
  s29_1[21],
  s29_1[20],
  s29_1[19],
  s29_1[18],
  s29_1[17],
  s29_1[16],
  s29_1[15],
  s29_1[14],
  s29_1[13],
  s29_1[12],
  s29_1[11],
  s29_1[10],
  s29_1[9],
  s29_1[8],
  s29_1[7],
  s29_1[6],
  s29_1[5],
  s29_1[4],
  s29_1[3],
  s29_1[2],
  s29_1[1],
  s29_1[0]};
assign n23 = s25_1 ? n20 : n19;
assign n24 = s25_1 ? n22 : n21;
cf_fft_1024_18_33 s25 (clock_c, n18, i4, i5, s25_1);
cf_fft_1024_18_12 s26 (clock_c, i2, i3, n1, i4, i5, s26_1, s26_2);
cf_fft_1024_18_24 s27 (clock_c, i1, i4, i5, s27_1, s27_2);
cf_fft_1024_18_28 s28 (clock_c, n2, n6, n11, n17, i4, i5, s28_1, s28_2, s28_3);
cf_fft_1024_18_29 s29 (clock_c, n2, n6, n11, n16, i4, i5, s29_1);
assign o3 = n24;
assign o2 = n23;
assign o1 = s28_1;
endmodule

module cf_fft_1024_18_12 (clock_c, i1, i2, i3, i4, i5, o1, o2);
input  clock_c;
input  [35:0] i1;
input  [35:0] i2;
input  [3:0] i3;
input  i4;
input  i5;
output [35:0] o1;
output [35:0] o2;
reg    [35:0] n1;
wire   [17:0] n2;
wire   [17:0] n3;
reg    [35:0] n4;
wire   [17:0] n5;
wire   [17:0] n6;
reg    [17:0] n7;
reg    [17:0] n8;
reg    [17:0] n9;
reg    [17:0] n10;
reg    [35:0] n11;
wire   [17:0] n12;
wire   [17:0] n13;
wire   [35:0] n14;
wire   [17:0] n15;
reg    [17:0] n16;
wire   [35:0] n17;
wire   [17:0] n18;
reg    [17:0] n19;
wire   [17:0] n20;
reg    [17:0] n21;
wire   [35:0] n22;
wire   [17:0] n23;
reg    [17:0] n24;
wire   [35:0] n25;
wire   [17:0] n26;
reg    [17:0] n27;
wire   [17:0] n28;
reg    [17:0] n29;
wire   [17:0] n30;
wire   [17:0] n31;
wire   [35:0] n32;
reg    [35:0] n33;
wire   [17:0] n34;
wire   [17:0] n35;
wire   [35:0] n36;
reg    [35:0] n37;
initial n1 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n1 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n1 <= i1;
assign n2 = {n1[35],
  n1[34],
  n1[33],
  n1[32],
  n1[31],
  n1[30],
  n1[29],
  n1[28],
  n1[27],
  n1[26],
  n1[25],
  n1[24],
  n1[23],
  n1[22],
  n1[21],
  n1[20],
  n1[19],
  n1[18]};
assign n3 = {n1[17],
  n1[16],
  n1[15],
  n1[14],
  n1[13],
  n1[12],
  n1[11],
  n1[10],
  n1[9],
  n1[8],
  n1[7],
  n1[6],
  n1[5],
  n1[4],
  n1[3],
  n1[2],
  n1[1],
  n1[0]};
initial n4 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n4 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n4 <= i2;
assign n5 = {n4[35],
  n4[34],
  n4[33],
  n4[32],
  n4[31],
  n4[30],
  n4[29],
  n4[28],
  n4[27],
  n4[26],
  n4[25],
  n4[24],
  n4[23],
  n4[22],
  n4[21],
  n4[20],
  n4[19],
  n4[18]};
assign n6 = {n4[17],
  n4[16],
  n4[15],
  n4[14],
  n4[13],
  n4[12],
  n4[11],
  n4[10],
  n4[9],
  n4[8],
  n4[7],
  n4[6],
  n4[5],
  n4[4],
  n4[3],
  n4[2],
  n4[1],
  n4[0]};
initial n7 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n7 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n7 <= n2;
initial n8 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n8 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n8 <= n7;
initial n9 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n9 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n9 <= n3;
initial n10 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n10 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n10 <= n9;
initial n11 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i4 == 1'b1)
    case (i3)
      4'b0000 : n11 <= 36'b011111111111111111000000000000000000;
      4'b0001 : n11 <= 36'b011111011000101001111001110000011101;
      4'b0010 : n11 <= 36'b011101100100000110110011110000010000;
      4'b0011 : n11 <= 36'b011010100110110110101110001110001100;
      4'b0100 : n11 <= 36'b010110101000001001101001010111110110;
      4'b0101 : n11 <= 36'b010001110001110011100101011001001001;
      4'b0110 : n11 <= 36'b001100001111101111100010011011111001;
      4'b0111 : n11 <= 36'b000110001111100010100000100111010110;
      4'b1000 : n11 <= 36'b000000000000000000100000000000000000;
      4'b1001 : n11 <= 36'b111001110000011101100000100111010110;
      4'b1010 : n11 <= 36'b110011110000010000100010011011111001;
      4'b1011 : n11 <= 36'b101110001110001100100101011001001001;
      4'b1100 : n11 <= 36'b101001010111110110101001010111110110;
      4'b1101 : n11 <= 36'b100101011001001001101110001110001100;
      4'b1110 : n11 <= 36'b100010011011111001110011110000010000;
      4'b1111 : n11 <= 36'b100000100111010110111001110000011101;
      default : n11 <= 36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    endcase
assign n12 = {n11[35],
  n11[34],
  n11[33],
  n11[32],
  n11[31],
  n11[30],
  n11[29],
  n11[28],
  n11[27],
  n11[26],
  n11[25],
  n11[24],
  n11[23],
  n11[22],
  n11[21],
  n11[20],
  n11[19],
  n11[18]};
assign n13 = {n11[17],
  n11[16],
  n11[15],
  n11[14],
  n11[13],
  n11[12],
  n11[11],
  n11[10],
  n11[9],
  n11[8],
  n11[7],
  n11[6],
  n11[5],
  n11[4],
  n11[3],
  n11[2],
  n11[1],
  n11[0]};
assign n14 = {{18{n5[17]}}, n5} * {{18{n12[17]}}, n12};
assign n15 = {n14[34],
  n14[33],
  n14[32],
  n14[31],
  n14[30],
  n14[29],
  n14[28],
  n14[27],
  n14[26],
  n14[25],
  n14[24],
  n14[23],
  n14[22],
  n14[21],
  n14[20],
  n14[19],
  n14[18],
  n14[17]};
initial n16 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n16 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n16 <= n15;
assign n17 = {{18{n6[17]}}, n6} * {{18{n13[17]}}, n13};
assign n18 = {n17[34],
  n17[33],
  n17[32],
  n17[31],
  n17[30],
  n17[29],
  n17[28],
  n17[27],
  n17[26],
  n17[25],
  n17[24],
  n17[23],
  n17[22],
  n17[21],
  n17[20],
  n17[19],
  n17[18],
  n17[17]};
initial n19 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n19 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n19 <= n18;
assign n20 = n16 - n19;
initial n21 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n21 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n21 <= n20;
assign n22 = {{18{n5[17]}}, n5} * {{18{n13[17]}}, n13};
assign n23 = {n22[34],
  n22[33],
  n22[32],
  n22[31],
  n22[30],
  n22[29],
  n22[28],
  n22[27],
  n22[26],
  n22[25],
  n22[24],
  n22[23],
  n22[22],
  n22[21],
  n22[20],
  n22[19],
  n22[18],
  n22[17]};
initial n24 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n24 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n24 <= n23;
assign n25 = {{18{n6[17]}}, n6} * {{18{n12[17]}}, n12};
assign n26 = {n25[34],
  n25[33],
  n25[32],
  n25[31],
  n25[30],
  n25[29],
  n25[28],
  n25[27],
  n25[26],
  n25[25],
  n25[24],
  n25[23],
  n25[22],
  n25[21],
  n25[20],
  n25[19],
  n25[18],
  n25[17]};
initial n27 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n27 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n27 <= n26;
assign n28 = n24 + n27;
initial n29 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n29 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n29 <= n28;
assign n30 = n8 + n21;
assign n31 = n10 + n29;
assign n32 = {n30, n31};
initial n33 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n33 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n33 <= n32;
assign n34 = n8 - n21;
assign n35 = n10 - n29;
assign n36 = {n34, n35};
initial n37 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n37 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n37 <= n36;
assign o2 = n37;
assign o1 = n33;
endmodule

module cf_fft_1024_18_13 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  [35:0] i2;
input  [35:0] i3;
input  i4;
input  i5;
output o1;
output [35:0] o2;
output [35:0] o3;
wire   [4:0] n1;
wire   [71:0] n2;
reg    n3;
reg    n4;
reg    n5;
reg    n6;
wire   [7:0] n7;
reg    [7:0] n8;
reg    [7:0] n9;
reg    [7:0] n10;
reg    [7:0] n11;
wire   n12;
reg    n13;
reg    n14;
reg    n15;
reg    n16;
wire   n17;
wire   [1:0] n18;
wire   [35:0] n19;
wire   [35:0] n20;
wire   [35:0] n21;
wire   [35:0] n22;
wire   [35:0] n23;
wire   [35:0] n24;
wire   s25_1;
wire   [35:0] s26_1;
wire   [35:0] s26_2;
wire   [8:0] s27_1;
wire   s27_2;
wire   s28_1;
wire   s28_2;
wire   [71:0] s28_3;
wire   [71:0] s29_1;
assign n1 = {s27_1[8],
  s27_1[7],
  s27_1[6],
  s27_1[5],
  s27_1[4]};
assign n2 = {s26_1, s26_2};
initial n3 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n3 <= 1'b0;
  else if (i4 == 1'b1)
    n3 <= s27_2;
initial n4 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n4 <= 1'b0;
  else if (i4 == 1'b1)
    n4 <= n3;
initial n5 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n5 <= 1'b0;
  else if (i4 == 1'b1)
    n5 <= n4;
initial n6 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n6 <= 1'b0;
  else if (i4 == 1'b1)
    n6 <= n5;
assign n7 = {s27_1[8],
  s27_1[7],
  s27_1[6],
  s27_1[5],
  s27_1[4],
  s27_1[3],
  s27_1[2],
  s27_1[1]};
initial n8 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n8 <= 8'b00000000;
  else if (i4 == 1'b1)
    n8 <= n7;
initial n9 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n9 <= 8'b00000000;
  else if (i4 == 1'b1)
    n9 <= n8;
initial n10 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n10 <= 8'b00000000;
  else if (i4 == 1'b1)
    n10 <= n9;
initial n11 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n11 <= 8'b00000000;
  else if (i4 == 1'b1)
    n11 <= n10;
assign n12 = s27_1[0];
initial n13 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n13 <= 1'b0;
  else if (i4 == 1'b1)
    n13 <= n12;
initial n14 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n14 <= 1'b0;
  else if (i4 == 1'b1)
    n14 <= n13;
initial n15 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n15 <= 1'b0;
  else if (i4 == 1'b1)
    n15 <= n14;
initial n16 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n16 <= 1'b0;
  else if (i4 == 1'b1)
    n16 <= n15;
assign n17 = ~n16;
assign n18 = {s28_2, s28_1};
assign n19 = {s28_3[71],
  s28_3[70],
  s28_3[69],
  s28_3[68],
  s28_3[67],
  s28_3[66],
  s28_3[65],
  s28_3[64],
  s28_3[63],
  s28_3[62],
  s28_3[61],
  s28_3[60],
  s28_3[59],
  s28_3[58],
  s28_3[57],
  s28_3[56],
  s28_3[55],
  s28_3[54],
  s28_3[53],
  s28_3[52],
  s28_3[51],
  s28_3[50],
  s28_3[49],
  s28_3[48],
  s28_3[47],
  s28_3[46],
  s28_3[45],
  s28_3[44],
  s28_3[43],
  s28_3[42],
  s28_3[41],
  s28_3[40],
  s28_3[39],
  s28_3[38],
  s28_3[37],
  s28_3[36]};
assign n20 = {s28_3[35],
  s28_3[34],
  s28_3[33],
  s28_3[32],
  s28_3[31],
  s28_3[30],
  s28_3[29],
  s28_3[28],
  s28_3[27],
  s28_3[26],
  s28_3[25],
  s28_3[24],
  s28_3[23],
  s28_3[22],
  s28_3[21],
  s28_3[20],
  s28_3[19],
  s28_3[18],
  s28_3[17],
  s28_3[16],
  s28_3[15],
  s28_3[14],
  s28_3[13],
  s28_3[12],
  s28_3[11],
  s28_3[10],
  s28_3[9],
  s28_3[8],
  s28_3[7],
  s28_3[6],
  s28_3[5],
  s28_3[4],
  s28_3[3],
  s28_3[2],
  s28_3[1],
  s28_3[0]};
assign n21 = {s29_1[71],
  s29_1[70],
  s29_1[69],
  s29_1[68],
  s29_1[67],
  s29_1[66],
  s29_1[65],
  s29_1[64],
  s29_1[63],
  s29_1[62],
  s29_1[61],
  s29_1[60],
  s29_1[59],
  s29_1[58],
  s29_1[57],
  s29_1[56],
  s29_1[55],
  s29_1[54],
  s29_1[53],
  s29_1[52],
  s29_1[51],
  s29_1[50],
  s29_1[49],
  s29_1[48],
  s29_1[47],
  s29_1[46],
  s29_1[45],
  s29_1[44],
  s29_1[43],
  s29_1[42],
  s29_1[41],
  s29_1[40],
  s29_1[39],
  s29_1[38],
  s29_1[37],
  s29_1[36]};
assign n22 = {s29_1[35],
  s29_1[34],
  s29_1[33],
  s29_1[32],
  s29_1[31],
  s29_1[30],
  s29_1[29],
  s29_1[28],
  s29_1[27],
  s29_1[26],
  s29_1[25],
  s29_1[24],
  s29_1[23],
  s29_1[22],
  s29_1[21],
  s29_1[20],
  s29_1[19],
  s29_1[18],
  s29_1[17],
  s29_1[16],
  s29_1[15],
  s29_1[14],
  s29_1[13],
  s29_1[12],
  s29_1[11],
  s29_1[10],
  s29_1[9],
  s29_1[8],
  s29_1[7],
  s29_1[6],
  s29_1[5],
  s29_1[4],
  s29_1[3],
  s29_1[2],
  s29_1[1],
  s29_1[0]};
assign n23 = s25_1 ? n20 : n19;
assign n24 = s25_1 ? n22 : n21;
cf_fft_1024_18_33 s25 (clock_c, n18, i4, i5, s25_1);
cf_fft_1024_18_14 s26 (clock_c, i2, i3, n1, i4, i5, s26_1, s26_2);
cf_fft_1024_18_24 s27 (clock_c, i1, i4, i5, s27_1, s27_2);
cf_fft_1024_18_28 s28 (clock_c, n2, n6, n11, n17, i4, i5, s28_1, s28_2, s28_3);
cf_fft_1024_18_29 s29 (clock_c, n2, n6, n11, n16, i4, i5, s29_1);
assign o3 = n24;
assign o2 = n23;
assign o1 = s28_1;
endmodule

module cf_fft_1024_18_14 (clock_c, i1, i2, i3, i4, i5, o1, o2);
input  clock_c;
input  [35:0] i1;
input  [35:0] i2;
input  [4:0] i3;
input  i4;
input  i5;
output [35:0] o1;
output [35:0] o2;
reg    [35:0] n1;
wire   [17:0] n2;
wire   [17:0] n3;
reg    [35:0] n4;
wire   [17:0] n5;
wire   [17:0] n6;
reg    [17:0] n7;
reg    [17:0] n8;
reg    [17:0] n9;
reg    [17:0] n10;
reg    [35:0] n11;
wire   [17:0] n12;
wire   [17:0] n13;
wire   [35:0] n14;
wire   [17:0] n15;
reg    [17:0] n16;
wire   [35:0] n17;
wire   [17:0] n18;
reg    [17:0] n19;
wire   [17:0] n20;
reg    [17:0] n21;
wire   [35:0] n22;
wire   [17:0] n23;
reg    [17:0] n24;
wire   [35:0] n25;
wire   [17:0] n26;
reg    [17:0] n27;
wire   [17:0] n28;
reg    [17:0] n29;
wire   [17:0] n30;
wire   [17:0] n31;
wire   [35:0] n32;
reg    [35:0] n33;
wire   [17:0] n34;
wire   [17:0] n35;
wire   [35:0] n36;
reg    [35:0] n37;
initial n1 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n1 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n1 <= i1;
assign n2 = {n1[35],
  n1[34],
  n1[33],
  n1[32],
  n1[31],
  n1[30],
  n1[29],
  n1[28],
  n1[27],
  n1[26],
  n1[25],
  n1[24],
  n1[23],
  n1[22],
  n1[21],
  n1[20],
  n1[19],
  n1[18]};
assign n3 = {n1[17],
  n1[16],
  n1[15],
  n1[14],
  n1[13],
  n1[12],
  n1[11],
  n1[10],
  n1[9],
  n1[8],
  n1[7],
  n1[6],
  n1[5],
  n1[4],
  n1[3],
  n1[2],
  n1[1],
  n1[0]};
initial n4 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n4 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n4 <= i2;
assign n5 = {n4[35],
  n4[34],
  n4[33],
  n4[32],
  n4[31],
  n4[30],
  n4[29],
  n4[28],
  n4[27],
  n4[26],
  n4[25],
  n4[24],
  n4[23],
  n4[22],
  n4[21],
  n4[20],
  n4[19],
  n4[18]};
assign n6 = {n4[17],
  n4[16],
  n4[15],
  n4[14],
  n4[13],
  n4[12],
  n4[11],
  n4[10],
  n4[9],
  n4[8],
  n4[7],
  n4[6],
  n4[5],
  n4[4],
  n4[3],
  n4[2],
  n4[1],
  n4[0]};
initial n7 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n7 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n7 <= n2;
initial n8 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n8 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n8 <= n7;
initial n9 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n9 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n9 <= n3;
initial n10 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n10 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n10 <= n9;
initial n11 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i4 == 1'b1)
    case (i3)
      5'b00000 : n11 <= 36'b011111111111111111000000000000000000;
      5'b00001 : n11 <= 36'b011111110110001000111100110111010000;
      5'b00010 : n11 <= 36'b011111011000101001111001110000011101;
      5'b00011 : n11 <= 36'b011110100111110100110110101101011111;
      5'b00100 : n11 <= 36'b011101100100000110110011110000010000;
      5'b00101 : n11 <= 36'b011100001110001011110000111010100101;
      5'b00110 : n11 <= 36'b011010100110110110101110001110001100;
      5'b00111 : n11 <= 36'b011000101111001000101011101100110000;
      5'b01000 : n11 <= 36'b010110101000001001101001010111110110;
      5'b01001 : n11 <= 36'b010100010011001111100111010000110111;
      5'b01010 : n11 <= 36'b010001110001110011100101011001001001;
      5'b01011 : n11 <= 36'b001111000101011010100011110001110100;
      5'b01100 : n11 <= 36'b001100001111101111100010011011111001;
      5'b01101 : n11 <= 36'b001001010010100000100001011000001011;
      5'b01110 : n11 <= 36'b000110001111100010100000100111010110;
      5'b01111 : n11 <= 36'b000011001000101111100000001001110111;
      5'b10000 : n11 <= 36'b000000000000000000100000000000000000;
      5'b10001 : n11 <= 36'b111100110111010000100000001001110111;
      5'b10010 : n11 <= 36'b111001110000011101100000100111010110;
      5'b10011 : n11 <= 36'b110110101101011111100001011000001011;
      5'b10100 : n11 <= 36'b110011110000010000100010011011111001;
      5'b10101 : n11 <= 36'b110000111010100101100011110001110100;
      5'b10110 : n11 <= 36'b101110001110001100100101011001001001;
      5'b10111 : n11 <= 36'b101011101100110000100111010000110111;
      5'b11000 : n11 <= 36'b101001010111110110101001010111110110;
      5'b11001 : n11 <= 36'b100111010000110111101011101100110000;
      5'b11010 : n11 <= 36'b100101011001001001101110001110001100;
      5'b11011 : n11 <= 36'b100011110001110100110000111010100101;
      5'b11100 : n11 <= 36'b100010011011111001110011110000010000;
      5'b11101 : n11 <= 36'b100001011000001011110110101101011111;
      5'b11110 : n11 <= 36'b100000100111010110111001110000011101;
      5'b11111 : n11 <= 36'b100000001001110111111100110111010000;
      default : n11 <= 36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    endcase
assign n12 = {n11[35],
  n11[34],
  n11[33],
  n11[32],
  n11[31],
  n11[30],
  n11[29],
  n11[28],
  n11[27],
  n11[26],
  n11[25],
  n11[24],
  n11[23],
  n11[22],
  n11[21],
  n11[20],
  n11[19],
  n11[18]};
assign n13 = {n11[17],
  n11[16],
  n11[15],
  n11[14],
  n11[13],
  n11[12],
  n11[11],
  n11[10],
  n11[9],
  n11[8],
  n11[7],
  n11[6],
  n11[5],
  n11[4],
  n11[3],
  n11[2],
  n11[1],
  n11[0]};
assign n14 = {{18{n5[17]}}, n5} * {{18{n12[17]}}, n12};
assign n15 = {n14[34],
  n14[33],
  n14[32],
  n14[31],
  n14[30],
  n14[29],
  n14[28],
  n14[27],
  n14[26],
  n14[25],
  n14[24],
  n14[23],
  n14[22],
  n14[21],
  n14[20],
  n14[19],
  n14[18],
  n14[17]};
initial n16 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n16 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n16 <= n15;
assign n17 = {{18{n6[17]}}, n6} * {{18{n13[17]}}, n13};
assign n18 = {n17[34],
  n17[33],
  n17[32],
  n17[31],
  n17[30],
  n17[29],
  n17[28],
  n17[27],
  n17[26],
  n17[25],
  n17[24],
  n17[23],
  n17[22],
  n17[21],
  n17[20],
  n17[19],
  n17[18],
  n17[17]};
initial n19 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n19 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n19 <= n18;
assign n20 = n16 - n19;
initial n21 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n21 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n21 <= n20;
assign n22 = {{18{n5[17]}}, n5} * {{18{n13[17]}}, n13};
assign n23 = {n22[34],
  n22[33],
  n22[32],
  n22[31],
  n22[30],
  n22[29],
  n22[28],
  n22[27],
  n22[26],
  n22[25],
  n22[24],
  n22[23],
  n22[22],
  n22[21],
  n22[20],
  n22[19],
  n22[18],
  n22[17]};
initial n24 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n24 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n24 <= n23;
assign n25 = {{18{n6[17]}}, n6} * {{18{n12[17]}}, n12};
assign n26 = {n25[34],
  n25[33],
  n25[32],
  n25[31],
  n25[30],
  n25[29],
  n25[28],
  n25[27],
  n25[26],
  n25[25],
  n25[24],
  n25[23],
  n25[22],
  n25[21],
  n25[20],
  n25[19],
  n25[18],
  n25[17]};
initial n27 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n27 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n27 <= n26;
assign n28 = n24 + n27;
initial n29 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n29 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n29 <= n28;
assign n30 = n8 + n21;
assign n31 = n10 + n29;
assign n32 = {n30, n31};
initial n33 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n33 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n33 <= n32;
assign n34 = n8 - n21;
assign n35 = n10 - n29;
assign n36 = {n34, n35};
initial n37 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n37 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n37 <= n36;
assign o2 = n37;
assign o1 = n33;
endmodule

module cf_fft_1024_18_15 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  [35:0] i2;
input  [35:0] i3;
input  i4;
input  i5;
output o1;
output [35:0] o2;
output [35:0] o3;
wire   [5:0] n1;
wire   [71:0] n2;
reg    n3;
reg    n4;
reg    n5;
reg    n6;
wire   [7:0] n7;
reg    [7:0] n8;
reg    [7:0] n9;
reg    [7:0] n10;
reg    [7:0] n11;
wire   n12;
reg    n13;
reg    n14;
reg    n15;
reg    n16;
wire   n17;
wire   [1:0] n18;
wire   [35:0] n19;
wire   [35:0] n20;
wire   [35:0] n21;
wire   [35:0] n22;
wire   [35:0] n23;
wire   [35:0] n24;
wire   s25_1;
wire   [35:0] s26_1;
wire   [35:0] s26_2;
wire   [8:0] s27_1;
wire   s27_2;
wire   s28_1;
wire   s28_2;
wire   [71:0] s28_3;
wire   [71:0] s29_1;
assign n1 = {s27_1[8],
  s27_1[7],
  s27_1[6],
  s27_1[5],
  s27_1[4],
  s27_1[3]};
assign n2 = {s26_1, s26_2};
initial n3 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n3 <= 1'b0;
  else if (i4 == 1'b1)
    n3 <= s27_2;
initial n4 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n4 <= 1'b0;
  else if (i4 == 1'b1)
    n4 <= n3;
initial n5 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n5 <= 1'b0;
  else if (i4 == 1'b1)
    n5 <= n4;
initial n6 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n6 <= 1'b0;
  else if (i4 == 1'b1)
    n6 <= n5;
assign n7 = {s27_1[8],
  s27_1[7],
  s27_1[6],
  s27_1[5],
  s27_1[4],
  s27_1[3],
  s27_1[2],
  s27_1[1]};
initial n8 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n8 <= 8'b00000000;
  else if (i4 == 1'b1)
    n8 <= n7;
initial n9 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n9 <= 8'b00000000;
  else if (i4 == 1'b1)
    n9 <= n8;
initial n10 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n10 <= 8'b00000000;
  else if (i4 == 1'b1)
    n10 <= n9;
initial n11 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n11 <= 8'b00000000;
  else if (i4 == 1'b1)
    n11 <= n10;
assign n12 = s27_1[0];
initial n13 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n13 <= 1'b0;
  else if (i4 == 1'b1)
    n13 <= n12;
initial n14 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n14 <= 1'b0;
  else if (i4 == 1'b1)
    n14 <= n13;
initial n15 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n15 <= 1'b0;
  else if (i4 == 1'b1)
    n15 <= n14;
initial n16 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n16 <= 1'b0;
  else if (i4 == 1'b1)
    n16 <= n15;
assign n17 = ~n16;
assign n18 = {s28_2, s28_1};
assign n19 = {s28_3[71],
  s28_3[70],
  s28_3[69],
  s28_3[68],
  s28_3[67],
  s28_3[66],
  s28_3[65],
  s28_3[64],
  s28_3[63],
  s28_3[62],
  s28_3[61],
  s28_3[60],
  s28_3[59],
  s28_3[58],
  s28_3[57],
  s28_3[56],
  s28_3[55],
  s28_3[54],
  s28_3[53],
  s28_3[52],
  s28_3[51],
  s28_3[50],
  s28_3[49],
  s28_3[48],
  s28_3[47],
  s28_3[46],
  s28_3[45],
  s28_3[44],
  s28_3[43],
  s28_3[42],
  s28_3[41],
  s28_3[40],
  s28_3[39],
  s28_3[38],
  s28_3[37],
  s28_3[36]};
assign n20 = {s28_3[35],
  s28_3[34],
  s28_3[33],
  s28_3[32],
  s28_3[31],
  s28_3[30],
  s28_3[29],
  s28_3[28],
  s28_3[27],
  s28_3[26],
  s28_3[25],
  s28_3[24],
  s28_3[23],
  s28_3[22],
  s28_3[21],
  s28_3[20],
  s28_3[19],
  s28_3[18],
  s28_3[17],
  s28_3[16],
  s28_3[15],
  s28_3[14],
  s28_3[13],
  s28_3[12],
  s28_3[11],
  s28_3[10],
  s28_3[9],
  s28_3[8],
  s28_3[7],
  s28_3[6],
  s28_3[5],
  s28_3[4],
  s28_3[3],
  s28_3[2],
  s28_3[1],
  s28_3[0]};
assign n21 = {s29_1[71],
  s29_1[70],
  s29_1[69],
  s29_1[68],
  s29_1[67],
  s29_1[66],
  s29_1[65],
  s29_1[64],
  s29_1[63],
  s29_1[62],
  s29_1[61],
  s29_1[60],
  s29_1[59],
  s29_1[58],
  s29_1[57],
  s29_1[56],
  s29_1[55],
  s29_1[54],
  s29_1[53],
  s29_1[52],
  s29_1[51],
  s29_1[50],
  s29_1[49],
  s29_1[48],
  s29_1[47],
  s29_1[46],
  s29_1[45],
  s29_1[44],
  s29_1[43],
  s29_1[42],
  s29_1[41],
  s29_1[40],
  s29_1[39],
  s29_1[38],
  s29_1[37],
  s29_1[36]};
assign n22 = {s29_1[35],
  s29_1[34],
  s29_1[33],
  s29_1[32],
  s29_1[31],
  s29_1[30],
  s29_1[29],
  s29_1[28],
  s29_1[27],
  s29_1[26],
  s29_1[25],
  s29_1[24],
  s29_1[23],
  s29_1[22],
  s29_1[21],
  s29_1[20],
  s29_1[19],
  s29_1[18],
  s29_1[17],
  s29_1[16],
  s29_1[15],
  s29_1[14],
  s29_1[13],
  s29_1[12],
  s29_1[11],
  s29_1[10],
  s29_1[9],
  s29_1[8],
  s29_1[7],
  s29_1[6],
  s29_1[5],
  s29_1[4],
  s29_1[3],
  s29_1[2],
  s29_1[1],
  s29_1[0]};
assign n23 = s25_1 ? n20 : n19;
assign n24 = s25_1 ? n22 : n21;
cf_fft_1024_18_33 s25 (clock_c, n18, i4, i5, s25_1);
cf_fft_1024_18_16 s26 (clock_c, i2, i3, n1, i4, i5, s26_1, s26_2);
cf_fft_1024_18_24 s27 (clock_c, i1, i4, i5, s27_1, s27_2);
cf_fft_1024_18_28 s28 (clock_c, n2, n6, n11, n17, i4, i5, s28_1, s28_2, s28_3);
cf_fft_1024_18_29 s29 (clock_c, n2, n6, n11, n16, i4, i5, s29_1);
assign o3 = n24;
assign o2 = n23;
assign o1 = s28_1;
endmodule

module cf_fft_1024_18_16 (clock_c, i1, i2, i3, i4, i5, o1, o2);
input  clock_c;
input  [35:0] i1;
input  [35:0] i2;
input  [5:0] i3;
input  i4;
input  i5;
output [35:0] o1;
output [35:0] o2;
reg    [35:0] n1;
wire   [17:0] n2;
wire   [17:0] n3;
reg    [35:0] n4;
wire   [17:0] n5;
wire   [17:0] n6;
reg    [17:0] n7;
reg    [17:0] n8;
reg    [17:0] n9;
reg    [17:0] n10;
reg    [35:0] n11;
wire   [17:0] n12;
wire   [17:0] n13;
wire   [35:0] n14;
wire   [17:0] n15;
reg    [17:0] n16;
wire   [35:0] n17;
wire   [17:0] n18;
reg    [17:0] n19;
wire   [17:0] n20;
reg    [17:0] n21;
wire   [35:0] n22;
wire   [17:0] n23;
reg    [17:0] n24;
wire   [35:0] n25;
wire   [17:0] n26;
reg    [17:0] n27;
wire   [17:0] n28;
reg    [17:0] n29;
wire   [17:0] n30;
wire   [17:0] n31;
wire   [35:0] n32;
reg    [35:0] n33;
wire   [17:0] n34;
wire   [17:0] n35;
wire   [35:0] n36;
reg    [35:0] n37;
initial n1 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n1 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n1 <= i1;
assign n2 = {n1[35],
  n1[34],
  n1[33],
  n1[32],
  n1[31],
  n1[30],
  n1[29],
  n1[28],
  n1[27],
  n1[26],
  n1[25],
  n1[24],
  n1[23],
  n1[22],
  n1[21],
  n1[20],
  n1[19],
  n1[18]};
assign n3 = {n1[17],
  n1[16],
  n1[15],
  n1[14],
  n1[13],
  n1[12],
  n1[11],
  n1[10],
  n1[9],
  n1[8],
  n1[7],
  n1[6],
  n1[5],
  n1[4],
  n1[3],
  n1[2],
  n1[1],
  n1[0]};
initial n4 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n4 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n4 <= i2;
assign n5 = {n4[35],
  n4[34],
  n4[33],
  n4[32],
  n4[31],
  n4[30],
  n4[29],
  n4[28],
  n4[27],
  n4[26],
  n4[25],
  n4[24],
  n4[23],
  n4[22],
  n4[21],
  n4[20],
  n4[19],
  n4[18]};
assign n6 = {n4[17],
  n4[16],
  n4[15],
  n4[14],
  n4[13],
  n4[12],
  n4[11],
  n4[10],
  n4[9],
  n4[8],
  n4[7],
  n4[6],
  n4[5],
  n4[4],
  n4[3],
  n4[2],
  n4[1],
  n4[0]};
initial n7 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n7 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n7 <= n2;
initial n8 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n8 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n8 <= n7;
initial n9 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n9 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n9 <= n3;
initial n10 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n10 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n10 <= n9;
initial n11 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i4 == 1'b1)
    case (i3)
      6'b000000 : n11 <= 36'b011111111111111111000000000000000000;
      6'b000001 : n11 <= 36'b011111111101100010111110011011100000;
      6'b000010 : n11 <= 36'b011111110110001000111100110111010000;
      6'b000011 : n11 <= 36'b011111101001110101111011010011011111;
      6'b000100 : n11 <= 36'b011111011000101001111001110000011101;
      6'b000101 : n11 <= 36'b011111000010100111111000001110011000;
      6'b000110 : n11 <= 36'b011110100111110100110110101101011111;
      6'b000111 : n11 <= 36'b011110001000010010110101001110000011;
      6'b001000 : n11 <= 36'b011101100100000110110011110000010000;
      6'b001001 : n11 <= 36'b011100111011010111110010010100010111;
      6'b001010 : n11 <= 36'b011100001110001011110000111010100101;
      6'b001011 : n11 <= 36'b011011011100101000101111100011000111;
      6'b001100 : n11 <= 36'b011010100110110110101110001110001100;
      6'b001101 : n11 <= 36'b011001101100111110101100111100000000;
      6'b001110 : n11 <= 36'b011000101111001000101011101100110000;
      6'b001111 : n11 <= 36'b010111101101011101101010100000101001;
      6'b010000 : n11 <= 36'b010110101000001001101001010111110110;
      6'b010001 : n11 <= 36'b010101011111010110101000010010100010;
      6'b010010 : n11 <= 36'b010100010011001111100111010000110111;
      6'b010011 : n11 <= 36'b010011000011111111100110010011000001;
      6'b010100 : n11 <= 36'b010001110001110011100101011001001001;
      6'b010101 : n11 <= 36'b010000011100111000100100100011010111;
      6'b010110 : n11 <= 36'b001111000101011010100011110001110100;
      6'b010111 : n11 <= 36'b001101101011101000100011000100101000;
      6'b011000 : n11 <= 36'b001100001111101111100010011011111001;
      6'b011001 : n11 <= 36'b001010110001111100100001110111101101;
      6'b011010 : n11 <= 36'b001001010010100000100001011000001011;
      6'b011011 : n11 <= 36'b000111110001100111100000111101011000;
      6'b011100 : n11 <= 36'b000110001111100010100000100111010110;
      6'b011101 : n11 <= 36'b000100101100100000100000010110001010;
      6'b011110 : n11 <= 36'b000011001000101111100000001001110111;
      6'b011111 : n11 <= 36'b000001100100011111100000000010011101;
      6'b100000 : n11 <= 36'b000000000000000000100000000000000000;
      6'b100001 : n11 <= 36'b111110011011100000100000000010011101;
      6'b100010 : n11 <= 36'b111100110111010000100000001001110111;
      6'b100011 : n11 <= 36'b111011010011011111100000010110001010;
      6'b100100 : n11 <= 36'b111001110000011101100000100111010110;
      6'b100101 : n11 <= 36'b111000001110011000100000111101011000;
      6'b100110 : n11 <= 36'b110110101101011111100001011000001011;
      6'b100111 : n11 <= 36'b110101001110000011100001110111101101;
      6'b101000 : n11 <= 36'b110011110000010000100010011011111001;
      6'b101001 : n11 <= 36'b110010010100010111100011000100101000;
      6'b101010 : n11 <= 36'b110000111010100101100011110001110100;
      6'b101011 : n11 <= 36'b101111100011000111100100100011010111;
      6'b101100 : n11 <= 36'b101110001110001100100101011001001001;
      6'b101101 : n11 <= 36'b101100111100000000100110010011000001;
      6'b101110 : n11 <= 36'b101011101100110000100111010000110111;
      6'b101111 : n11 <= 36'b101010100000101001101000010010100010;
      6'b110000 : n11 <= 36'b101001010111110110101001010111110110;
      6'b110001 : n11 <= 36'b101000010010100010101010100000101001;
      6'b110010 : n11 <= 36'b100111010000110111101011101100110000;
      6'b110011 : n11 <= 36'b100110010011000001101100111100000000;
      6'b110100 : n11 <= 36'b100101011001001001101110001110001100;
      6'b110101 : n11 <= 36'b100100100011010111101111100011000111;
      6'b110110 : n11 <= 36'b100011110001110100110000111010100101;
      6'b110111 : n11 <= 36'b100011000100101000110010010100010111;
      6'b111000 : n11 <= 36'b100010011011111001110011110000010000;
      6'b111001 : n11 <= 36'b100001110111101101110101001110000011;
      6'b111010 : n11 <= 36'b100001011000001011110110101101011111;
      6'b111011 : n11 <= 36'b100000111101011000111000001110011000;
      6'b111100 : n11 <= 36'b100000100111010110111001110000011101;
      6'b111101 : n11 <= 36'b100000010110001010111011010011011111;
      6'b111110 : n11 <= 36'b100000001001110111111100110111010000;
      6'b111111 : n11 <= 36'b100000000010011101111110011011100000;
      default : n11 <= 36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    endcase
assign n12 = {n11[35],
  n11[34],
  n11[33],
  n11[32],
  n11[31],
  n11[30],
  n11[29],
  n11[28],
  n11[27],
  n11[26],
  n11[25],
  n11[24],
  n11[23],
  n11[22],
  n11[21],
  n11[20],
  n11[19],
  n11[18]};
assign n13 = {n11[17],
  n11[16],
  n11[15],
  n11[14],
  n11[13],
  n11[12],
  n11[11],
  n11[10],
  n11[9],
  n11[8],
  n11[7],
  n11[6],
  n11[5],
  n11[4],
  n11[3],
  n11[2],
  n11[1],
  n11[0]};
assign n14 = {{18{n5[17]}}, n5} * {{18{n12[17]}}, n12};
assign n15 = {n14[34],
  n14[33],
  n14[32],
  n14[31],
  n14[30],
  n14[29],
  n14[28],
  n14[27],
  n14[26],
  n14[25],
  n14[24],
  n14[23],
  n14[22],
  n14[21],
  n14[20],
  n14[19],
  n14[18],
  n14[17]};
initial n16 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n16 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n16 <= n15;
assign n17 = {{18{n6[17]}}, n6} * {{18{n13[17]}}, n13};
assign n18 = {n17[34],
  n17[33],
  n17[32],
  n17[31],
  n17[30],
  n17[29],
  n17[28],
  n17[27],
  n17[26],
  n17[25],
  n17[24],
  n17[23],
  n17[22],
  n17[21],
  n17[20],
  n17[19],
  n17[18],
  n17[17]};
initial n19 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n19 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n19 <= n18;
assign n20 = n16 - n19;
initial n21 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n21 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n21 <= n20;
assign n22 = {{18{n5[17]}}, n5} * {{18{n13[17]}}, n13};
assign n23 = {n22[34],
  n22[33],
  n22[32],
  n22[31],
  n22[30],
  n22[29],
  n22[28],
  n22[27],
  n22[26],
  n22[25],
  n22[24],
  n22[23],
  n22[22],
  n22[21],
  n22[20],
  n22[19],
  n22[18],
  n22[17]};
initial n24 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n24 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n24 <= n23;
assign n25 = {{18{n6[17]}}, n6} * {{18{n12[17]}}, n12};
assign n26 = {n25[34],
  n25[33],
  n25[32],
  n25[31],
  n25[30],
  n25[29],
  n25[28],
  n25[27],
  n25[26],
  n25[25],
  n25[24],
  n25[23],
  n25[22],
  n25[21],
  n25[20],
  n25[19],
  n25[18],
  n25[17]};
initial n27 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n27 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n27 <= n26;
assign n28 = n24 + n27;
initial n29 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n29 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n29 <= n28;
assign n30 = n8 + n21;
assign n31 = n10 + n29;
assign n32 = {n30, n31};
initial n33 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n33 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n33 <= n32;
assign n34 = n8 - n21;
assign n35 = n10 - n29;
assign n36 = {n34, n35};
initial n37 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n37 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n37 <= n36;
assign o2 = n37;
assign o1 = n33;
endmodule

module cf_fft_1024_18_17 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  [35:0] i2;
input  [35:0] i3;
input  i4;
input  i5;
output o1;
output [35:0] o2;
output [35:0] o3;
wire   [6:0] n1;
wire   [71:0] n2;
reg    n3;
reg    n4;
reg    n5;
reg    n6;
wire   [7:0] n7;
reg    [7:0] n8;
reg    [7:0] n9;
reg    [7:0] n10;
reg    [7:0] n11;
wire   n12;
reg    n13;
reg    n14;
reg    n15;
reg    n16;
wire   n17;
wire   [1:0] n18;
wire   [35:0] n19;
wire   [35:0] n20;
wire   [35:0] n21;
wire   [35:0] n22;
wire   [35:0] n23;
wire   [35:0] n24;
wire   [35:0] s25_1;
wire   [35:0] s25_2;
wire   s26_1;
wire   [8:0] s27_1;
wire   s27_2;
wire   [71:0] s28_1;
wire   s29_1;
wire   s29_2;
wire   [71:0] s29_3;
assign n1 = {s27_1[8],
  s27_1[7],
  s27_1[6],
  s27_1[5],
  s27_1[4],
  s27_1[3],
  s27_1[2]};
assign n2 = {s25_1, s25_2};
initial n3 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n3 <= 1'b0;
  else if (i4 == 1'b1)
    n3 <= s27_2;
initial n4 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n4 <= 1'b0;
  else if (i4 == 1'b1)
    n4 <= n3;
initial n5 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n5 <= 1'b0;
  else if (i4 == 1'b1)
    n5 <= n4;
initial n6 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n6 <= 1'b0;
  else if (i4 == 1'b1)
    n6 <= n5;
assign n7 = {s27_1[8],
  s27_1[7],
  s27_1[6],
  s27_1[5],
  s27_1[4],
  s27_1[3],
  s27_1[2],
  s27_1[1]};
initial n8 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n8 <= 8'b00000000;
  else if (i4 == 1'b1)
    n8 <= n7;
initial n9 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n9 <= 8'b00000000;
  else if (i4 == 1'b1)
    n9 <= n8;
initial n10 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n10 <= 8'b00000000;
  else if (i4 == 1'b1)
    n10 <= n9;
initial n11 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n11 <= 8'b00000000;
  else if (i4 == 1'b1)
    n11 <= n10;
assign n12 = s27_1[0];
initial n13 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n13 <= 1'b0;
  else if (i4 == 1'b1)
    n13 <= n12;
initial n14 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n14 <= 1'b0;
  else if (i4 == 1'b1)
    n14 <= n13;
initial n15 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n15 <= 1'b0;
  else if (i4 == 1'b1)
    n15 <= n14;
initial n16 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n16 <= 1'b0;
  else if (i4 == 1'b1)
    n16 <= n15;
assign n17 = ~n16;
assign n18 = {s29_2, s29_1};
assign n19 = {s29_3[71],
  s29_3[70],
  s29_3[69],
  s29_3[68],
  s29_3[67],
  s29_3[66],
  s29_3[65],
  s29_3[64],
  s29_3[63],
  s29_3[62],
  s29_3[61],
  s29_3[60],
  s29_3[59],
  s29_3[58],
  s29_3[57],
  s29_3[56],
  s29_3[55],
  s29_3[54],
  s29_3[53],
  s29_3[52],
  s29_3[51],
  s29_3[50],
  s29_3[49],
  s29_3[48],
  s29_3[47],
  s29_3[46],
  s29_3[45],
  s29_3[44],
  s29_3[43],
  s29_3[42],
  s29_3[41],
  s29_3[40],
  s29_3[39],
  s29_3[38],
  s29_3[37],
  s29_3[36]};
assign n20 = {s29_3[35],
  s29_3[34],
  s29_3[33],
  s29_3[32],
  s29_3[31],
  s29_3[30],
  s29_3[29],
  s29_3[28],
  s29_3[27],
  s29_3[26],
  s29_3[25],
  s29_3[24],
  s29_3[23],
  s29_3[22],
  s29_3[21],
  s29_3[20],
  s29_3[19],
  s29_3[18],
  s29_3[17],
  s29_3[16],
  s29_3[15],
  s29_3[14],
  s29_3[13],
  s29_3[12],
  s29_3[11],
  s29_3[10],
  s29_3[9],
  s29_3[8],
  s29_3[7],
  s29_3[6],
  s29_3[5],
  s29_3[4],
  s29_3[3],
  s29_3[2],
  s29_3[1],
  s29_3[0]};
assign n21 = {s28_1[71],
  s28_1[70],
  s28_1[69],
  s28_1[68],
  s28_1[67],
  s28_1[66],
  s28_1[65],
  s28_1[64],
  s28_1[63],
  s28_1[62],
  s28_1[61],
  s28_1[60],
  s28_1[59],
  s28_1[58],
  s28_1[57],
  s28_1[56],
  s28_1[55],
  s28_1[54],
  s28_1[53],
  s28_1[52],
  s28_1[51],
  s28_1[50],
  s28_1[49],
  s28_1[48],
  s28_1[47],
  s28_1[46],
  s28_1[45],
  s28_1[44],
  s28_1[43],
  s28_1[42],
  s28_1[41],
  s28_1[40],
  s28_1[39],
  s28_1[38],
  s28_1[37],
  s28_1[36]};
assign n22 = {s28_1[35],
  s28_1[34],
  s28_1[33],
  s28_1[32],
  s28_1[31],
  s28_1[30],
  s28_1[29],
  s28_1[28],
  s28_1[27],
  s28_1[26],
  s28_1[25],
  s28_1[24],
  s28_1[23],
  s28_1[22],
  s28_1[21],
  s28_1[20],
  s28_1[19],
  s28_1[18],
  s28_1[17],
  s28_1[16],
  s28_1[15],
  s28_1[14],
  s28_1[13],
  s28_1[12],
  s28_1[11],
  s28_1[10],
  s28_1[9],
  s28_1[8],
  s28_1[7],
  s28_1[6],
  s28_1[5],
  s28_1[4],
  s28_1[3],
  s28_1[2],
  s28_1[1],
  s28_1[0]};
assign n23 = s26_1 ? n20 : n19;
assign n24 = s26_1 ? n22 : n21;
cf_fft_1024_18_18 s25 (clock_c, i2, i3, n1, i4, i5, s25_1, s25_2);
cf_fft_1024_18_33 s26 (clock_c, n18, i4, i5, s26_1);
cf_fft_1024_18_24 s27 (clock_c, i1, i4, i5, s27_1, s27_2);
cf_fft_1024_18_29 s28 (clock_c, n2, n6, n11, n16, i4, i5, s28_1);
cf_fft_1024_18_28 s29 (clock_c, n2, n6, n11, n17, i4, i5, s29_1, s29_2, s29_3);
assign o3 = n24;
assign o2 = n23;
assign o1 = s29_1;
endmodule

module cf_fft_1024_18_18 (clock_c, i1, i2, i3, i4, i5, o1, o2);
input  clock_c;
input  [35:0] i1;
input  [35:0] i2;
input  [6:0] i3;
input  i4;
input  i5;
output [35:0] o1;
output [35:0] o2;
reg    [35:0] n1;
wire   [17:0] n2;
wire   [17:0] n3;
reg    [35:0] n4;
wire   [17:0] n5;
wire   [17:0] n6;
reg    [17:0] n7;
reg    [17:0] n8;
reg    [17:0] n9;
reg    [17:0] n10;
reg    [35:0] n11;
wire   [17:0] n12;
wire   [17:0] n13;
wire   [35:0] n14;
wire   [17:0] n15;
reg    [17:0] n16;
wire   [35:0] n17;
wire   [17:0] n18;
reg    [17:0] n19;
wire   [17:0] n20;
reg    [17:0] n21;
wire   [35:0] n22;
wire   [17:0] n23;
reg    [17:0] n24;
wire   [35:0] n25;
wire   [17:0] n26;
reg    [17:0] n27;
wire   [17:0] n28;
reg    [17:0] n29;
wire   [17:0] n30;
wire   [17:0] n31;
wire   [35:0] n32;
reg    [35:0] n33;
wire   [17:0] n34;
wire   [17:0] n35;
wire   [35:0] n36;
reg    [35:0] n37;
initial n1 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n1 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n1 <= i1;
assign n2 = {n1[35],
  n1[34],
  n1[33],
  n1[32],
  n1[31],
  n1[30],
  n1[29],
  n1[28],
  n1[27],
  n1[26],
  n1[25],
  n1[24],
  n1[23],
  n1[22],
  n1[21],
  n1[20],
  n1[19],
  n1[18]};
assign n3 = {n1[17],
  n1[16],
  n1[15],
  n1[14],
  n1[13],
  n1[12],
  n1[11],
  n1[10],
  n1[9],
  n1[8],
  n1[7],
  n1[6],
  n1[5],
  n1[4],
  n1[3],
  n1[2],
  n1[1],
  n1[0]};
initial n4 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n4 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n4 <= i2;
assign n5 = {n4[35],
  n4[34],
  n4[33],
  n4[32],
  n4[31],
  n4[30],
  n4[29],
  n4[28],
  n4[27],
  n4[26],
  n4[25],
  n4[24],
  n4[23],
  n4[22],
  n4[21],
  n4[20],
  n4[19],
  n4[18]};
assign n6 = {n4[17],
  n4[16],
  n4[15],
  n4[14],
  n4[13],
  n4[12],
  n4[11],
  n4[10],
  n4[9],
  n4[8],
  n4[7],
  n4[6],
  n4[5],
  n4[4],
  n4[3],
  n4[2],
  n4[1],
  n4[0]};
initial n7 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n7 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n7 <= n2;
initial n8 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n8 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n8 <= n7;
initial n9 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n9 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n9 <= n3;
initial n10 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n10 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n10 <= n9;
initial n11 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i4 == 1'b1)
    case (i3)
      7'b0000000 : n11 <= 36'b011111111111111111000000000000000000;
      7'b0000001 : n11 <= 36'b011111111111011000111111001101101111;
      7'b0000010 : n11 <= 36'b011111111101100010111110011011100000;
      7'b0000011 : n11 <= 36'b011111111010011100111101101001010101;
      7'b0000100 : n11 <= 36'b011111110110001000111100110111010000;
      7'b0000101 : n11 <= 36'b011111110000100110111100000101010011;
      7'b0000110 : n11 <= 36'b011111101001110101111011010011011111;
      7'b0000111 : n11 <= 36'b011111100001110110111010100001110111;
      7'b0001000 : n11 <= 36'b011111011000101001111001110000011101;
      7'b0001001 : n11 <= 36'b011111001110001111111000111111010001;
      7'b0001010 : n11 <= 36'b011111000010100111111000001110011000;
      7'b0001011 : n11 <= 36'b011110110101110100110111011101110001;
      7'b0001100 : n11 <= 36'b011110100111110100110110101101011111;
      7'b0001101 : n11 <= 36'b011110011000101000110101111101100101;
      7'b0001110 : n11 <= 36'b011110001000010010110101001110000011;
      7'b0001111 : n11 <= 36'b011101110110110001110100011110111011;
      7'b0010000 : n11 <= 36'b011101100100000110110011110000010000;
      7'b0010001 : n11 <= 36'b011101010000010011110011000010000100;
      7'b0010010 : n11 <= 36'b011100111011010111110010010100010111;
      7'b0010011 : n11 <= 36'b011100100101010100110001100111001100;
      7'b0010100 : n11 <= 36'b011100001110001011110000111010100101;
      7'b0010101 : n11 <= 36'b011011110101111100110000001110100010;
      7'b0010110 : n11 <= 36'b011011011100101000101111100011000111;
      7'b0010111 : n11 <= 36'b011011000010010000101110111000010100;
      7'b0011000 : n11 <= 36'b011010100110110110101110001110001100;
      7'b0011001 : n11 <= 36'b011010001010011010101101100100101111;
      7'b0011010 : n11 <= 36'b011001101100111110101100111100000000;
      7'b0011011 : n11 <= 36'b011001001110100010101100010100000000;
      7'b0011100 : n11 <= 36'b011000101111001000101011101100110000;
      7'b0011101 : n11 <= 36'b011000001110110000101011000110010011;
      7'b0011110 : n11 <= 36'b010111101101011101101010100000101001;
      7'b0011111 : n11 <= 36'b010111001011010000101001111011110100;
      7'b0100000 : n11 <= 36'b010110101000001001101001010111110110;
      7'b0100001 : n11 <= 36'b010110000100001011101000110100101111;
      7'b0100010 : n11 <= 36'b010101011111010110101000010010100010;
      7'b0100011 : n11 <= 36'b010100111001101100100111110001001111;
      7'b0100100 : n11 <= 36'b010100010011001111100111010000110111;
      7'b0100101 : n11 <= 36'b010011101011111111100110110001011101;
      7'b0100110 : n11 <= 36'b010011000011111111100110010011000001;
      7'b0100111 : n11 <= 36'b010010011011010000100101110101100101;
      7'b0101000 : n11 <= 36'b010001110001110011100101011001001001;
      7'b0101001 : n11 <= 36'b010001000111101011100100111101101111;
      7'b0101010 : n11 <= 36'b010000011100111000100100100011010111;
      7'b0101011 : n11 <= 36'b001111110001011101100100001010000011;
      7'b0101100 : n11 <= 36'b001111000101011010100011110001110100;
      7'b0101101 : n11 <= 36'b001110011000110011100011011010101011;
      7'b0101110 : n11 <= 36'b001101101011101000100011000100101000;
      7'b0101111 : n11 <= 36'b001100111101111011100010101111101100;
      7'b0110000 : n11 <= 36'b001100001111101111100010011011111001;
      7'b0110001 : n11 <= 36'b001011100001000100100010001001001110;
      7'b0110010 : n11 <= 36'b001010110001111100100001110111101101;
      7'b0110011 : n11 <= 36'b001010000010011010100001100111010111;
      7'b0110100 : n11 <= 36'b001001010010100000100001011000001011;
      7'b0110101 : n11 <= 36'b001000100010001110100001001010001011;
      7'b0110110 : n11 <= 36'b000111110001100111100000111101011000;
      7'b0110111 : n11 <= 36'b000111000000101110100000110001110000;
      7'b0111000 : n11 <= 36'b000110001111100010100000100111010110;
      7'b0111001 : n11 <= 36'b000101011110001000100000011110001001;
      7'b0111010 : n11 <= 36'b000100101100100000100000010110001010;
      7'b0111011 : n11 <= 36'b000011111010101100100000001111011001;
      7'b0111100 : n11 <= 36'b000011001000101111100000001001110111;
      7'b0111101 : n11 <= 36'b000010010110101010100000000101100011;
      7'b0111110 : n11 <= 36'b000001100100011111100000000010011101;
      7'b0111111 : n11 <= 36'b000000110010010000100000000000100111;
      7'b1000000 : n11 <= 36'b000000000000000000100000000000000000;
      7'b1000001 : n11 <= 36'b111111001101101111100000000000100111;
      7'b1000010 : n11 <= 36'b111110011011100000100000000010011101;
      7'b1000011 : n11 <= 36'b111101101001010101100000000101100011;
      7'b1000100 : n11 <= 36'b111100110111010000100000001001110111;
      7'b1000101 : n11 <= 36'b111100000101010011100000001111011001;
      7'b1000110 : n11 <= 36'b111011010011011111100000010110001010;
      7'b1000111 : n11 <= 36'b111010100001110111100000011110001001;
      7'b1001000 : n11 <= 36'b111001110000011101100000100111010110;
      7'b1001001 : n11 <= 36'b111000111111010001100000110001110000;
      7'b1001010 : n11 <= 36'b111000001110011000100000111101011000;
      7'b1001011 : n11 <= 36'b110111011101110001100001001010001011;
      7'b1001100 : n11 <= 36'b110110101101011111100001011000001011;
      7'b1001101 : n11 <= 36'b110101111101100101100001100111010111;
      7'b1001110 : n11 <= 36'b110101001110000011100001110111101101;
      7'b1001111 : n11 <= 36'b110100011110111011100010001001001110;
      7'b1010000 : n11 <= 36'b110011110000010000100010011011111001;
      7'b1010001 : n11 <= 36'b110011000010000100100010101111101100;
      7'b1010010 : n11 <= 36'b110010010100010111100011000100101000;
      7'b1010011 : n11 <= 36'b110001100111001100100011011010101011;
      7'b1010100 : n11 <= 36'b110000111010100101100011110001110100;
      7'b1010101 : n11 <= 36'b110000001110100010100100001010000011;
      7'b1010110 : n11 <= 36'b101111100011000111100100100011010111;
      7'b1010111 : n11 <= 36'b101110111000010100100100111101101111;
      7'b1011000 : n11 <= 36'b101110001110001100100101011001001001;
      7'b1011001 : n11 <= 36'b101101100100101111100101110101100101;
      7'b1011010 : n11 <= 36'b101100111100000000100110010011000001;
      7'b1011011 : n11 <= 36'b101100010100000000100110110001011101;
      7'b1011100 : n11 <= 36'b101011101100110000100111010000110111;
      7'b1011101 : n11 <= 36'b101011000110010011100111110001001111;
      7'b1011110 : n11 <= 36'b101010100000101001101000010010100010;
      7'b1011111 : n11 <= 36'b101001111011110100101000110100101111;
      7'b1100000 : n11 <= 36'b101001010111110110101001010111110110;
      7'b1100001 : n11 <= 36'b101000110100101111101001111011110100;
      7'b1100010 : n11 <= 36'b101000010010100010101010100000101001;
      7'b1100011 : n11 <= 36'b100111110001001111101011000110010011;
      7'b1100100 : n11 <= 36'b100111010000110111101011101100110000;
      7'b1100101 : n11 <= 36'b100110110001011101101100010100000000;
      7'b1100110 : n11 <= 36'b100110010011000001101100111100000000;
      7'b1100111 : n11 <= 36'b100101110101100101101101100100101111;
      7'b1101000 : n11 <= 36'b100101011001001001101110001110001100;
      7'b1101001 : n11 <= 36'b100100111101101111101110111000010100;
      7'b1101010 : n11 <= 36'b100100100011010111101111100011000111;
      7'b1101011 : n11 <= 36'b100100001010000011110000001110100010;
      7'b1101100 : n11 <= 36'b100011110001110100110000111010100101;
      7'b1101101 : n11 <= 36'b100011011010101011110001100111001100;
      7'b1101110 : n11 <= 36'b100011000100101000110010010100010111;
      7'b1101111 : n11 <= 36'b100010101111101100110011000010000100;
      7'b1110000 : n11 <= 36'b100010011011111001110011110000010000;
      7'b1110001 : n11 <= 36'b100010001001001110110100011110111011;
      7'b1110010 : n11 <= 36'b100001110111101101110101001110000011;
      7'b1110011 : n11 <= 36'b100001100111010111110101111101100101;
      7'b1110100 : n11 <= 36'b100001011000001011110110101101011111;
      7'b1110101 : n11 <= 36'b100001001010001011110111011101110001;
      7'b1110110 : n11 <= 36'b100000111101011000111000001110011000;
      7'b1110111 : n11 <= 36'b100000110001110000111000111111010001;
      7'b1111000 : n11 <= 36'b100000100111010110111001110000011101;
      7'b1111001 : n11 <= 36'b100000011110001001111010100001110111;
      7'b1111010 : n11 <= 36'b100000010110001010111011010011011111;
      7'b1111011 : n11 <= 36'b100000001111011001111100000101010011;
      7'b1111100 : n11 <= 36'b100000001001110111111100110111010000;
      7'b1111101 : n11 <= 36'b100000000101100011111101101001010101;
      7'b1111110 : n11 <= 36'b100000000010011101111110011011100000;
      7'b1111111 : n11 <= 36'b100000000000100111111111001101101111;
      default : n11 <= 36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    endcase
assign n12 = {n11[35],
  n11[34],
  n11[33],
  n11[32],
  n11[31],
  n11[30],
  n11[29],
  n11[28],
  n11[27],
  n11[26],
  n11[25],
  n11[24],
  n11[23],
  n11[22],
  n11[21],
  n11[20],
  n11[19],
  n11[18]};
assign n13 = {n11[17],
  n11[16],
  n11[15],
  n11[14],
  n11[13],
  n11[12],
  n11[11],
  n11[10],
  n11[9],
  n11[8],
  n11[7],
  n11[6],
  n11[5],
  n11[4],
  n11[3],
  n11[2],
  n11[1],
  n11[0]};
assign n14 = {{18{n5[17]}}, n5} * {{18{n12[17]}}, n12};
assign n15 = {n14[34],
  n14[33],
  n14[32],
  n14[31],
  n14[30],
  n14[29],
  n14[28],
  n14[27],
  n14[26],
  n14[25],
  n14[24],
  n14[23],
  n14[22],
  n14[21],
  n14[20],
  n14[19],
  n14[18],
  n14[17]};
initial n16 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n16 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n16 <= n15;
assign n17 = {{18{n6[17]}}, n6} * {{18{n13[17]}}, n13};
assign n18 = {n17[34],
  n17[33],
  n17[32],
  n17[31],
  n17[30],
  n17[29],
  n17[28],
  n17[27],
  n17[26],
  n17[25],
  n17[24],
  n17[23],
  n17[22],
  n17[21],
  n17[20],
  n17[19],
  n17[18],
  n17[17]};
initial n19 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n19 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n19 <= n18;
assign n20 = n16 - n19;
initial n21 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n21 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n21 <= n20;
assign n22 = {{18{n5[17]}}, n5} * {{18{n13[17]}}, n13};
assign n23 = {n22[34],
  n22[33],
  n22[32],
  n22[31],
  n22[30],
  n22[29],
  n22[28],
  n22[27],
  n22[26],
  n22[25],
  n22[24],
  n22[23],
  n22[22],
  n22[21],
  n22[20],
  n22[19],
  n22[18],
  n22[17]};
initial n24 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n24 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n24 <= n23;
assign n25 = {{18{n6[17]}}, n6} * {{18{n12[17]}}, n12};
assign n26 = {n25[34],
  n25[33],
  n25[32],
  n25[31],
  n25[30],
  n25[29],
  n25[28],
  n25[27],
  n25[26],
  n25[25],
  n25[24],
  n25[23],
  n25[22],
  n25[21],
  n25[20],
  n25[19],
  n25[18],
  n25[17]};
initial n27 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n27 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n27 <= n26;
assign n28 = n24 + n27;
initial n29 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n29 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n29 <= n28;
assign n30 = n8 + n21;
assign n31 = n10 + n29;
assign n32 = {n30, n31};
initial n33 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n33 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n33 <= n32;
assign n34 = n8 - n21;
assign n35 = n10 - n29;
assign n36 = {n34, n35};
initial n37 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n37 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n37 <= n36;
assign o2 = n37;
assign o1 = n33;
endmodule

module cf_fft_1024_18_19 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  [35:0] i2;
input  [35:0] i3;
input  i4;
input  i5;
output o1;
output [35:0] o2;
output [35:0] o3;
wire   [7:0] n1;
wire   [71:0] n2;
reg    n3;
reg    n4;
reg    n5;
reg    n6;
wire   [7:0] n7;
reg    [7:0] n8;
reg    [7:0] n9;
reg    [7:0] n10;
reg    [7:0] n11;
wire   n12;
reg    n13;
reg    n14;
reg    n15;
reg    n16;
wire   n17;
wire   [1:0] n18;
wire   [35:0] n19;
wire   [35:0] n20;
wire   [35:0] n21;
wire   [35:0] n22;
wire   [35:0] n23;
wire   [35:0] n24;
wire   [35:0] s25_1;
wire   [35:0] s25_2;
wire   s26_1;
wire   [71:0] s27_1;
wire   s28_1;
wire   s28_2;
wire   [71:0] s28_3;
wire   [8:0] s29_1;
wire   s29_2;
assign n1 = {s29_1[8],
  s29_1[7],
  s29_1[6],
  s29_1[5],
  s29_1[4],
  s29_1[3],
  s29_1[2],
  s29_1[1]};
assign n2 = {s25_1, s25_2};
initial n3 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n3 <= 1'b0;
  else if (i4 == 1'b1)
    n3 <= s29_2;
initial n4 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n4 <= 1'b0;
  else if (i4 == 1'b1)
    n4 <= n3;
initial n5 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n5 <= 1'b0;
  else if (i4 == 1'b1)
    n5 <= n4;
initial n6 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n6 <= 1'b0;
  else if (i4 == 1'b1)
    n6 <= n5;
assign n7 = {s29_1[8],
  s29_1[7],
  s29_1[6],
  s29_1[5],
  s29_1[4],
  s29_1[3],
  s29_1[2],
  s29_1[1]};
initial n8 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n8 <= 8'b00000000;
  else if (i4 == 1'b1)
    n8 <= n7;
initial n9 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n9 <= 8'b00000000;
  else if (i4 == 1'b1)
    n9 <= n8;
initial n10 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n10 <= 8'b00000000;
  else if (i4 == 1'b1)
    n10 <= n9;
initial n11 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n11 <= 8'b00000000;
  else if (i4 == 1'b1)
    n11 <= n10;
assign n12 = s29_1[0];
initial n13 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n13 <= 1'b0;
  else if (i4 == 1'b1)
    n13 <= n12;
initial n14 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n14 <= 1'b0;
  else if (i4 == 1'b1)
    n14 <= n13;
initial n15 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n15 <= 1'b0;
  else if (i4 == 1'b1)
    n15 <= n14;
initial n16 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n16 <= 1'b0;
  else if (i4 == 1'b1)
    n16 <= n15;
assign n17 = ~n16;
assign n18 = {s28_2, s28_1};
assign n19 = {s28_3[71],
  s28_3[70],
  s28_3[69],
  s28_3[68],
  s28_3[67],
  s28_3[66],
  s28_3[65],
  s28_3[64],
  s28_3[63],
  s28_3[62],
  s28_3[61],
  s28_3[60],
  s28_3[59],
  s28_3[58],
  s28_3[57],
  s28_3[56],
  s28_3[55],
  s28_3[54],
  s28_3[53],
  s28_3[52],
  s28_3[51],
  s28_3[50],
  s28_3[49],
  s28_3[48],
  s28_3[47],
  s28_3[46],
  s28_3[45],
  s28_3[44],
  s28_3[43],
  s28_3[42],
  s28_3[41],
  s28_3[40],
  s28_3[39],
  s28_3[38],
  s28_3[37],
  s28_3[36]};
assign n20 = {s28_3[35],
  s28_3[34],
  s28_3[33],
  s28_3[32],
  s28_3[31],
  s28_3[30],
  s28_3[29],
  s28_3[28],
  s28_3[27],
  s28_3[26],
  s28_3[25],
  s28_3[24],
  s28_3[23],
  s28_3[22],
  s28_3[21],
  s28_3[20],
  s28_3[19],
  s28_3[18],
  s28_3[17],
  s28_3[16],
  s28_3[15],
  s28_3[14],
  s28_3[13],
  s28_3[12],
  s28_3[11],
  s28_3[10],
  s28_3[9],
  s28_3[8],
  s28_3[7],
  s28_3[6],
  s28_3[5],
  s28_3[4],
  s28_3[3],
  s28_3[2],
  s28_3[1],
  s28_3[0]};
assign n21 = {s27_1[71],
  s27_1[70],
  s27_1[69],
  s27_1[68],
  s27_1[67],
  s27_1[66],
  s27_1[65],
  s27_1[64],
  s27_1[63],
  s27_1[62],
  s27_1[61],
  s27_1[60],
  s27_1[59],
  s27_1[58],
  s27_1[57],
  s27_1[56],
  s27_1[55],
  s27_1[54],
  s27_1[53],
  s27_1[52],
  s27_1[51],
  s27_1[50],
  s27_1[49],
  s27_1[48],
  s27_1[47],
  s27_1[46],
  s27_1[45],
  s27_1[44],
  s27_1[43],
  s27_1[42],
  s27_1[41],
  s27_1[40],
  s27_1[39],
  s27_1[38],
  s27_1[37],
  s27_1[36]};
assign n22 = {s27_1[35],
  s27_1[34],
  s27_1[33],
  s27_1[32],
  s27_1[31],
  s27_1[30],
  s27_1[29],
  s27_1[28],
  s27_1[27],
  s27_1[26],
  s27_1[25],
  s27_1[24],
  s27_1[23],
  s27_1[22],
  s27_1[21],
  s27_1[20],
  s27_1[19],
  s27_1[18],
  s27_1[17],
  s27_1[16],
  s27_1[15],
  s27_1[14],
  s27_1[13],
  s27_1[12],
  s27_1[11],
  s27_1[10],
  s27_1[9],
  s27_1[8],
  s27_1[7],
  s27_1[6],
  s27_1[5],
  s27_1[4],
  s27_1[3],
  s27_1[2],
  s27_1[1],
  s27_1[0]};
assign n23 = s26_1 ? n20 : n19;
assign n24 = s26_1 ? n22 : n21;
cf_fft_1024_18_20 s25 (clock_c, i2, i3, n1, i4, i5, s25_1, s25_2);
cf_fft_1024_18_33 s26 (clock_c, n18, i4, i5, s26_1);
cf_fft_1024_18_29 s27 (clock_c, n2, n6, n11, n16, i4, i5, s27_1);
cf_fft_1024_18_28 s28 (clock_c, n2, n6, n11, n17, i4, i5, s28_1, s28_2, s28_3);
cf_fft_1024_18_24 s29 (clock_c, i1, i4, i5, s29_1, s29_2);
assign o3 = n24;
assign o2 = n23;
assign o1 = s28_1;
endmodule

module cf_fft_1024_18_20 (clock_c, i1, i2, i3, i4, i5, o1, o2);
input  clock_c;
input  [35:0] i1;
input  [35:0] i2;
input  [7:0] i3;
input  i4;
input  i5;
output [35:0] o1;
output [35:0] o2;
reg    [35:0] n1;
wire   [17:0] n2;
wire   [17:0] n3;
reg    [35:0] n4;
wire   [17:0] n5;
wire   [17:0] n6;
reg    [17:0] n7;
reg    [17:0] n8;
reg    [17:0] n9;
reg    [17:0] n10;
reg    [35:0] n11;
wire   [17:0] n12;
wire   [17:0] n13;
wire   [35:0] n14;
wire   [17:0] n15;
reg    [17:0] n16;
wire   [35:0] n17;
wire   [17:0] n18;
reg    [17:0] n19;
wire   [17:0] n20;
reg    [17:0] n21;
wire   [35:0] n22;
wire   [17:0] n23;
reg    [17:0] n24;
wire   [35:0] n25;
wire   [17:0] n26;
reg    [17:0] n27;
wire   [17:0] n28;
reg    [17:0] n29;
wire   [17:0] n30;
wire   [17:0] n31;
wire   [35:0] n32;
reg    [35:0] n33;
wire   [17:0] n34;
wire   [17:0] n35;
wire   [35:0] n36;
reg    [35:0] n37;
initial n1 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n1 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n1 <= i1;
assign n2 = {n1[35],
  n1[34],
  n1[33],
  n1[32],
  n1[31],
  n1[30],
  n1[29],
  n1[28],
  n1[27],
  n1[26],
  n1[25],
  n1[24],
  n1[23],
  n1[22],
  n1[21],
  n1[20],
  n1[19],
  n1[18]};
assign n3 = {n1[17],
  n1[16],
  n1[15],
  n1[14],
  n1[13],
  n1[12],
  n1[11],
  n1[10],
  n1[9],
  n1[8],
  n1[7],
  n1[6],
  n1[5],
  n1[4],
  n1[3],
  n1[2],
  n1[1],
  n1[0]};
initial n4 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n4 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n4 <= i2;
assign n5 = {n4[35],
  n4[34],
  n4[33],
  n4[32],
  n4[31],
  n4[30],
  n4[29],
  n4[28],
  n4[27],
  n4[26],
  n4[25],
  n4[24],
  n4[23],
  n4[22],
  n4[21],
  n4[20],
  n4[19],
  n4[18]};
assign n6 = {n4[17],
  n4[16],
  n4[15],
  n4[14],
  n4[13],
  n4[12],
  n4[11],
  n4[10],
  n4[9],
  n4[8],
  n4[7],
  n4[6],
  n4[5],
  n4[4],
  n4[3],
  n4[2],
  n4[1],
  n4[0]};
initial n7 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n7 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n7 <= n2;
initial n8 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n8 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n8 <= n7;
initial n9 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n9 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n9 <= n3;
initial n10 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n10 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n10 <= n9;
initial n11 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i4 == 1'b1)
    case (i3)
      8'b00000000 : n11 <= 36'b011111111111111111000000000000000000;
      8'b00000001 : n11 <= 36'b011111111111110110111111100110110111;
      8'b00000010 : n11 <= 36'b011111111111011000111111001101101111;
      8'b00000011 : n11 <= 36'b011111111110100111111110110100100111;
      8'b00000100 : n11 <= 36'b011111111101100010111110011011100000;
      8'b00000101 : n11 <= 36'b011111111100001001111110000010011010;
      8'b00000110 : n11 <= 36'b011111111010011100111101101001010101;
      8'b00000111 : n11 <= 36'b011111111000011100111101010000010010;
      8'b00001000 : n11 <= 36'b011111110110001000111100110111010000;
      8'b00001001 : n11 <= 36'b011111110011100001111100011110010000;
      8'b00001010 : n11 <= 36'b011111110000100110111100000101010011;
      8'b00001011 : n11 <= 36'b011111101101010111111011101100011000;
      8'b00001100 : n11 <= 36'b011111101001110101111011010011011111;
      8'b00001101 : n11 <= 36'b011111100101111111111010111010101010;
      8'b00001110 : n11 <= 36'b011111100001110110111010100001110111;
      8'b00001111 : n11 <= 36'b011111011101011001111010001001001000;
      8'b00010000 : n11 <= 36'b011111011000101001111001110000011101;
      8'b00010001 : n11 <= 36'b011111010011100110111001010111110101;
      8'b00010010 : n11 <= 36'b011111001110001111111000111111010001;
      8'b00010011 : n11 <= 36'b011111001000100101111000100110110010;
      8'b00010100 : n11 <= 36'b011111000010100111111000001110011000;
      8'b00010101 : n11 <= 36'b011110111100010111110111110110000010;
      8'b00010110 : n11 <= 36'b011110110101110100110111011101110001;
      8'b00010111 : n11 <= 36'b011110101110111101110111000101100101;
      8'b00011000 : n11 <= 36'b011110100111110100110110101101011111;
      8'b00011001 : n11 <= 36'b011110100000010111110110010101011111;
      8'b00011010 : n11 <= 36'b011110011000101000110101111101100101;
      8'b00011011 : n11 <= 36'b011110010000100110110101100101110000;
      8'b00011100 : n11 <= 36'b011110001000010010110101001110000011;
      8'b00011101 : n11 <= 36'b011101111111101010110100110110011100;
      8'b00011110 : n11 <= 36'b011101110110110001110100011110111011;
      8'b00011111 : n11 <= 36'b011101101101100101110100000111100010;
      8'b00100000 : n11 <= 36'b011101100100000110110011110000010000;
      8'b00100001 : n11 <= 36'b011101011010010110110011011001000110;
      8'b00100010 : n11 <= 36'b011101010000010011110011000010000100;
      8'b00100011 : n11 <= 36'b011101000101111110110010101011001001;
      8'b00100100 : n11 <= 36'b011100111011010111110010010100010111;
      8'b00100101 : n11 <= 36'b011100110000011111110001111101101101;
      8'b00100110 : n11 <= 36'b011100100101010100110001100111001100;
      8'b00100111 : n11 <= 36'b011100011001111000110001010000110100;
      8'b00101000 : n11 <= 36'b011100001110001011110000111010100101;
      8'b00101001 : n11 <= 36'b011100000010001100110000100100011111;
      8'b00101010 : n11 <= 36'b011011110101111100110000001110100010;
      8'b00101011 : n11 <= 36'b011011101001011010101111111000110000;
      8'b00101100 : n11 <= 36'b011011011100101000101111100011000111;
      8'b00101101 : n11 <= 36'b011011001111100100101111001101101000;
      8'b00101110 : n11 <= 36'b011011000010010000101110111000010100;
      8'b00101111 : n11 <= 36'b011010110100101011101110100011001011;
      8'b00110000 : n11 <= 36'b011010100110110110101110001110001100;
      8'b00110001 : n11 <= 36'b011010011000110000101101111001011000;
      8'b00110010 : n11 <= 36'b011010001010011010101101100100101111;
      8'b00110011 : n11 <= 36'b011001111011110100101101010000010010;
      8'b00110100 : n11 <= 36'b011001101100111110101100111100000000;
      8'b00110101 : n11 <= 36'b011001011101110111101100100111111010;
      8'b00110110 : n11 <= 36'b011001001110100010101100010100000000;
      8'b00110111 : n11 <= 36'b011000111110111100101100000000010010;
      8'b00111000 : n11 <= 36'b011000101111001000101011101100110000;
      8'b00111001 : n11 <= 36'b011000011111000100101011011001011011;
      8'b00111010 : n11 <= 36'b011000001110110000101011000110010011;
      8'b00111011 : n11 <= 36'b010111111110001110101010110011010111;
      8'b00111100 : n11 <= 36'b010111101101011101101010100000101001;
      8'b00111101 : n11 <= 36'b010111011100011110101010001110001000;
      8'b00111110 : n11 <= 36'b010111001011010000101001111011110100;
      8'b00111111 : n11 <= 36'b010110111001110100101001101001101110;
      8'b01000000 : n11 <= 36'b010110101000001001101001010111110110;
      8'b01000001 : n11 <= 36'b010110010110010001101001000110001011;
      8'b01000010 : n11 <= 36'b010110000100001011101000110100101111;
      8'b01000011 : n11 <= 36'b010101110001110111101000100011100001;
      8'b01000100 : n11 <= 36'b010101011111010110101000010010100010;
      8'b01000101 : n11 <= 36'b010101001100101000101000000001110001;
      8'b01000110 : n11 <= 36'b010100111001101100100111110001001111;
      8'b01000111 : n11 <= 36'b010100100110100100100111100000111011;
      8'b01001000 : n11 <= 36'b010100010011001111100111010000110111;
      8'b01001001 : n11 <= 36'b010011111111101101100111000001000011;
      8'b01001010 : n11 <= 36'b010011101011111111100110110001011101;
      8'b01001011 : n11 <= 36'b010011011000000101100110100010001000;
      8'b01001100 : n11 <= 36'b010011000011111111100110010011000001;
      8'b01001101 : n11 <= 36'b010010101111101101100110000100001011;
      8'b01001110 : n11 <= 36'b010010011011010000100101110101100101;
      8'b01001111 : n11 <= 36'b010010000110100111100101100111001111;
      8'b01010000 : n11 <= 36'b010001110001110011100101011001001001;
      8'b01010001 : n11 <= 36'b010001011100110100100101001011010100;
      8'b01010010 : n11 <= 36'b010001000111101011100100111101101111;
      8'b01010011 : n11 <= 36'b010000110010010111100100110000011011;
      8'b01010100 : n11 <= 36'b010000011100111000100100100011010111;
      8'b01010101 : n11 <= 36'b010000000111001111100100010110100101;
      8'b01010110 : n11 <= 36'b001111110001011101100100001010000011;
      8'b01010111 : n11 <= 36'b001111011011100000100011111101110011;
      8'b01011000 : n11 <= 36'b001111000101011010100011110001110100;
      8'b01011001 : n11 <= 36'b001110101111001011100011100110000111;
      8'b01011010 : n11 <= 36'b001110011000110011100011011010101011;
      8'b01011011 : n11 <= 36'b001110000010010010100011001111100000;
      8'b01011100 : n11 <= 36'b001101101011101000100011000100101000;
      8'b01011101 : n11 <= 36'b001101010100110110100010111010000001;
      8'b01011110 : n11 <= 36'b001100111101111011100010101111101100;
      8'b01011111 : n11 <= 36'b001100100110111001100010100101101001;
      8'b01100000 : n11 <= 36'b001100001111101111100010011011111001;
      8'b01100001 : n11 <= 36'b001011111000011101100010010010011010;
      8'b01100010 : n11 <= 36'b001011100001000100100010001001001110;
      8'b01100011 : n11 <= 36'b001011001001100011100010000000010101;
      8'b01100100 : n11 <= 36'b001010110001111100100001110111101101;
      8'b01100101 : n11 <= 36'b001010011010001111100001101111011001;
      8'b01100110 : n11 <= 36'b001010000010011010100001100111010111;
      8'b01100111 : n11 <= 36'b001001101010100000100001011111101000;
      8'b01101000 : n11 <= 36'b001001010010100000100001011000001011;
      8'b01101001 : n11 <= 36'b001000111010011010100001010001000010;
      8'b01101010 : n11 <= 36'b001000100010001110100001001010001011;
      8'b01101011 : n11 <= 36'b001000001001111101100001000011101000;
      8'b01101100 : n11 <= 36'b000111110001100111100000111101011000;
      8'b01101101 : n11 <= 36'b000111011001001101100000110111011010;
      8'b01101110 : n11 <= 36'b000111000000101110100000110001110000;
      8'b01101111 : n11 <= 36'b000110101000001010100000101100011001;
      8'b01110000 : n11 <= 36'b000110001111100010100000100111010110;
      8'b01110001 : n11 <= 36'b000101110110110111100000100010100110;
      8'b01110010 : n11 <= 36'b000101011110001000100000011110001001;
      8'b01110011 : n11 <= 36'b000101000101010101100000011010000000;
      8'b01110100 : n11 <= 36'b000100101100100000100000010110001010;
      8'b01110101 : n11 <= 36'b000100010011100111100000010010101000;
      8'b01110110 : n11 <= 36'b000011111010101100100000001111011001;
      8'b01110111 : n11 <= 36'b000011100001101111100000001100011110;
      8'b01111000 : n11 <= 36'b000011001000101111100000001001110111;
      8'b01111001 : n11 <= 36'b000010101111101101100000000111100011;
      8'b01111010 : n11 <= 36'b000010010110101010100000000101100011;
      8'b01111011 : n11 <= 36'b000001111101100101100000000011110110;
      8'b01111100 : n11 <= 36'b000001100100011111100000000010011101;
      8'b01111101 : n11 <= 36'b000001001011011000100000000001011000;
      8'b01111110 : n11 <= 36'b000000110010010000100000000000100111;
      8'b01111111 : n11 <= 36'b000000011001001000100000000000001001;
      8'b10000000 : n11 <= 36'b000000000000000000100000000000000000;
      8'b10000001 : n11 <= 36'b111111100110110111100000000000001001;
      8'b10000010 : n11 <= 36'b111111001101101111100000000000100111;
      8'b10000011 : n11 <= 36'b111110110100100111100000000001011000;
      8'b10000100 : n11 <= 36'b111110011011100000100000000010011101;
      8'b10000101 : n11 <= 36'b111110000010011010100000000011110110;
      8'b10000110 : n11 <= 36'b111101101001010101100000000101100011;
      8'b10000111 : n11 <= 36'b111101010000010010100000000111100011;
      8'b10001000 : n11 <= 36'b111100110111010000100000001001110111;
      8'b10001001 : n11 <= 36'b111100011110010000100000001100011110;
      8'b10001010 : n11 <= 36'b111100000101010011100000001111011001;
      8'b10001011 : n11 <= 36'b111011101100011000100000010010101000;
      8'b10001100 : n11 <= 36'b111011010011011111100000010110001010;
      8'b10001101 : n11 <= 36'b111010111010101010100000011010000000;
      8'b10001110 : n11 <= 36'b111010100001110111100000011110001001;
      8'b10001111 : n11 <= 36'b111010001001001000100000100010100110;
      8'b10010000 : n11 <= 36'b111001110000011101100000100111010110;
      8'b10010001 : n11 <= 36'b111001010111110101100000101100011001;
      8'b10010010 : n11 <= 36'b111000111111010001100000110001110000;
      8'b10010011 : n11 <= 36'b111000100110110010100000110111011010;
      8'b10010100 : n11 <= 36'b111000001110011000100000111101011000;
      8'b10010101 : n11 <= 36'b110111110110000010100001000011101000;
      8'b10010110 : n11 <= 36'b110111011101110001100001001010001011;
      8'b10010111 : n11 <= 36'b110111000101100101100001010001000010;
      8'b10011000 : n11 <= 36'b110110101101011111100001011000001011;
      8'b10011001 : n11 <= 36'b110110010101011111100001011111101000;
      8'b10011010 : n11 <= 36'b110101111101100101100001100111010111;
      8'b10011011 : n11 <= 36'b110101100101110000100001101111011001;
      8'b10011100 : n11 <= 36'b110101001110000011100001110111101101;
      8'b10011101 : n11 <= 36'b110100110110011100100010000000010101;
      8'b10011110 : n11 <= 36'b110100011110111011100010001001001110;
      8'b10011111 : n11 <= 36'b110100000111100010100010010010011010;
      8'b10100000 : n11 <= 36'b110011110000010000100010011011111001;
      8'b10100001 : n11 <= 36'b110011011001000110100010100101101001;
      8'b10100010 : n11 <= 36'b110011000010000100100010101111101100;
      8'b10100011 : n11 <= 36'b110010101011001001100010111010000001;
      8'b10100100 : n11 <= 36'b110010010100010111100011000100101000;
      8'b10100101 : n11 <= 36'b110001111101101101100011001111100000;
      8'b10100110 : n11 <= 36'b110001100111001100100011011010101011;
      8'b10100111 : n11 <= 36'b110001010000110100100011100110000111;
      8'b10101000 : n11 <= 36'b110000111010100101100011110001110100;
      8'b10101001 : n11 <= 36'b110000100100011111100011111101110011;
      8'b10101010 : n11 <= 36'b110000001110100010100100001010000011;
      8'b10101011 : n11 <= 36'b101111111000110000100100010110100101;
      8'b10101100 : n11 <= 36'b101111100011000111100100100011010111;
      8'b10101101 : n11 <= 36'b101111001101101000100100110000011011;
      8'b10101110 : n11 <= 36'b101110111000010100100100111101101111;
      8'b10101111 : n11 <= 36'b101110100011001011100101001011010100;
      8'b10110000 : n11 <= 36'b101110001110001100100101011001001001;
      8'b10110001 : n11 <= 36'b101101111001011000100101100111001111;
      8'b10110010 : n11 <= 36'b101101100100101111100101110101100101;
      8'b10110011 : n11 <= 36'b101101010000010010100110000100001011;
      8'b10110100 : n11 <= 36'b101100111100000000100110010011000001;
      8'b10110101 : n11 <= 36'b101100100111111010100110100010001000;
      8'b10110110 : n11 <= 36'b101100010100000000100110110001011101;
      8'b10110111 : n11 <= 36'b101100000000010010100111000001000011;
      8'b10111000 : n11 <= 36'b101011101100110000100111010000110111;
      8'b10111001 : n11 <= 36'b101011011001011011100111100000111011;
      8'b10111010 : n11 <= 36'b101011000110010011100111110001001111;
      8'b10111011 : n11 <= 36'b101010110011010111101000000001110001;
      8'b10111100 : n11 <= 36'b101010100000101001101000010010100010;
      8'b10111101 : n11 <= 36'b101010001110001000101000100011100001;
      8'b10111110 : n11 <= 36'b101001111011110100101000110100101111;
      8'b10111111 : n11 <= 36'b101001101001101110101001000110001011;
      8'b11000000 : n11 <= 36'b101001010111110110101001010111110110;
      8'b11000001 : n11 <= 36'b101001000110001011101001101001101110;
      8'b11000010 : n11 <= 36'b101000110100101111101001111011110100;
      8'b11000011 : n11 <= 36'b101000100011100001101010001110001000;
      8'b11000100 : n11 <= 36'b101000010010100010101010100000101001;
      8'b11000101 : n11 <= 36'b101000000001110001101010110011010111;
      8'b11000110 : n11 <= 36'b100111110001001111101011000110010011;
      8'b11000111 : n11 <= 36'b100111100000111011101011011001011011;
      8'b11001000 : n11 <= 36'b100111010000110111101011101100110000;
      8'b11001001 : n11 <= 36'b100111000001000011101100000000010010;
      8'b11001010 : n11 <= 36'b100110110001011101101100010100000000;
      8'b11001011 : n11 <= 36'b100110100010001000101100100111111010;
      8'b11001100 : n11 <= 36'b100110010011000001101100111100000000;
      8'b11001101 : n11 <= 36'b100110000100001011101101010000010010;
      8'b11001110 : n11 <= 36'b100101110101100101101101100100101111;
      8'b11001111 : n11 <= 36'b100101100111001111101101111001011000;
      8'b11010000 : n11 <= 36'b100101011001001001101110001110001100;
      8'b11010001 : n11 <= 36'b100101001011010100101110100011001011;
      8'b11010010 : n11 <= 36'b100100111101101111101110111000010100;
      8'b11010011 : n11 <= 36'b100100110000011011101111001101101000;
      8'b11010100 : n11 <= 36'b100100100011010111101111100011000111;
      8'b11010101 : n11 <= 36'b100100010110100101101111111000110000;
      8'b11010110 : n11 <= 36'b100100001010000011110000001110100010;
      8'b11010111 : n11 <= 36'b100011111101110011110000100100011111;
      8'b11011000 : n11 <= 36'b100011110001110100110000111010100101;
      8'b11011001 : n11 <= 36'b100011100110000111110001010000110100;
      8'b11011010 : n11 <= 36'b100011011010101011110001100111001100;
      8'b11011011 : n11 <= 36'b100011001111100000110001111101101101;
      8'b11011100 : n11 <= 36'b100011000100101000110010010100010111;
      8'b11011101 : n11 <= 36'b100010111010000001110010101011001001;
      8'b11011110 : n11 <= 36'b100010101111101100110011000010000100;
      8'b11011111 : n11 <= 36'b100010100101101001110011011001000110;
      8'b11100000 : n11 <= 36'b100010011011111001110011110000010000;
      8'b11100001 : n11 <= 36'b100010010010011010110100000111100010;
      8'b11100010 : n11 <= 36'b100010001001001110110100011110111011;
      8'b11100011 : n11 <= 36'b100010000000010101110100110110011100;
      8'b11100100 : n11 <= 36'b100001110111101101110101001110000011;
      8'b11100101 : n11 <= 36'b100001101111011001110101100101110000;
      8'b11100110 : n11 <= 36'b100001100111010111110101111101100101;
      8'b11100111 : n11 <= 36'b100001011111101000110110010101011111;
      8'b11101000 : n11 <= 36'b100001011000001011110110101101011111;
      8'b11101001 : n11 <= 36'b100001010001000010110111000101100101;
      8'b11101010 : n11 <= 36'b100001001010001011110111011101110001;
      8'b11101011 : n11 <= 36'b100001000011101000110111110110000010;
      8'b11101100 : n11 <= 36'b100000111101011000111000001110011000;
      8'b11101101 : n11 <= 36'b100000110111011010111000100110110010;
      8'b11101110 : n11 <= 36'b100000110001110000111000111111010001;
      8'b11101111 : n11 <= 36'b100000101100011001111001010111110101;
      8'b11110000 : n11 <= 36'b100000100111010110111001110000011101;
      8'b11110001 : n11 <= 36'b100000100010100110111010001001001000;
      8'b11110010 : n11 <= 36'b100000011110001001111010100001110111;
      8'b11110011 : n11 <= 36'b100000011010000000111010111010101010;
      8'b11110100 : n11 <= 36'b100000010110001010111011010011011111;
      8'b11110101 : n11 <= 36'b100000010010101000111011101100011000;
      8'b11110110 : n11 <= 36'b100000001111011001111100000101010011;
      8'b11110111 : n11 <= 36'b100000001100011110111100011110010000;
      8'b11111000 : n11 <= 36'b100000001001110111111100110111010000;
      8'b11111001 : n11 <= 36'b100000000111100011111101010000010010;
      8'b11111010 : n11 <= 36'b100000000101100011111101101001010101;
      8'b11111011 : n11 <= 36'b100000000011110110111110000010011010;
      8'b11111100 : n11 <= 36'b100000000010011101111110011011100000;
      8'b11111101 : n11 <= 36'b100000000001011000111110110100100111;
      8'b11111110 : n11 <= 36'b100000000000100111111111001101101111;
      8'b11111111 : n11 <= 36'b100000000000001001111111100110110111;
      default : n11 <= 36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    endcase
assign n12 = {n11[35],
  n11[34],
  n11[33],
  n11[32],
  n11[31],
  n11[30],
  n11[29],
  n11[28],
  n11[27],
  n11[26],
  n11[25],
  n11[24],
  n11[23],
  n11[22],
  n11[21],
  n11[20],
  n11[19],
  n11[18]};
assign n13 = {n11[17],
  n11[16],
  n11[15],
  n11[14],
  n11[13],
  n11[12],
  n11[11],
  n11[10],
  n11[9],
  n11[8],
  n11[7],
  n11[6],
  n11[5],
  n11[4],
  n11[3],
  n11[2],
  n11[1],
  n11[0]};
assign n14 = {{18{n5[17]}}, n5} * {{18{n12[17]}}, n12};
assign n15 = {n14[34],
  n14[33],
  n14[32],
  n14[31],
  n14[30],
  n14[29],
  n14[28],
  n14[27],
  n14[26],
  n14[25],
  n14[24],
  n14[23],
  n14[22],
  n14[21],
  n14[20],
  n14[19],
  n14[18],
  n14[17]};
initial n16 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n16 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n16 <= n15;
assign n17 = {{18{n6[17]}}, n6} * {{18{n13[17]}}, n13};
assign n18 = {n17[34],
  n17[33],
  n17[32],
  n17[31],
  n17[30],
  n17[29],
  n17[28],
  n17[27],
  n17[26],
  n17[25],
  n17[24],
  n17[23],
  n17[22],
  n17[21],
  n17[20],
  n17[19],
  n17[18],
  n17[17]};
initial n19 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n19 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n19 <= n18;
assign n20 = n16 - n19;
initial n21 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n21 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n21 <= n20;
assign n22 = {{18{n5[17]}}, n5} * {{18{n13[17]}}, n13};
assign n23 = {n22[34],
  n22[33],
  n22[32],
  n22[31],
  n22[30],
  n22[29],
  n22[28],
  n22[27],
  n22[26],
  n22[25],
  n22[24],
  n22[23],
  n22[22],
  n22[21],
  n22[20],
  n22[19],
  n22[18],
  n22[17]};
initial n24 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n24 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n24 <= n23;
assign n25 = {{18{n6[17]}}, n6} * {{18{n12[17]}}, n12};
assign n26 = {n25[34],
  n25[33],
  n25[32],
  n25[31],
  n25[30],
  n25[29],
  n25[28],
  n25[27],
  n25[26],
  n25[25],
  n25[24],
  n25[23],
  n25[22],
  n25[21],
  n25[20],
  n25[19],
  n25[18],
  n25[17]};
initial n27 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n27 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n27 <= n26;
assign n28 = n24 + n27;
initial n29 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n29 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n29 <= n28;
assign n30 = n8 + n21;
assign n31 = n10 + n29;
assign n32 = {n30, n31};
initial n33 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n33 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n33 <= n32;
assign n34 = n8 - n21;
assign n35 = n10 - n29;
assign n36 = {n34, n35};
initial n37 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n37 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n37 <= n36;
assign o2 = n37;
assign o1 = n33;
endmodule

module cf_fft_1024_18_21 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  [35:0] i2;
input  [35:0] i3;
input  i4;
input  i5;
output o1;
output [35:0] o2;
output [35:0] o3;
wire   [8:0] n1;
wire   [71:0] n2;
reg    n3;
reg    n4;
reg    n5;
reg    n6;
wire   [7:0] n7;
reg    [7:0] n8;
reg    [7:0] n9;
reg    [7:0] n10;
reg    [7:0] n11;
wire   n12;
reg    n13;
reg    n14;
reg    n15;
reg    n16;
wire   n17;
wire   [1:0] n18;
wire   [35:0] n19;
wire   [35:0] n20;
wire   [35:0] n21;
wire   [35:0] n22;
wire   [35:0] n23;
wire   [35:0] n24;
wire   [35:0] s25_1;
wire   [35:0] s25_2;
wire   s26_1;
wire   [71:0] s27_1;
wire   s28_1;
wire   s28_2;
wire   [71:0] s28_3;
wire   [8:0] s29_1;
wire   s29_2;
assign n1 = {s29_1[8],
  s29_1[7],
  s29_1[6],
  s29_1[5],
  s29_1[4],
  s29_1[3],
  s29_1[2],
  s29_1[1],
  s29_1[0]};
assign n2 = {s25_1, s25_2};
initial n3 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n3 <= 1'b0;
  else if (i4 == 1'b1)
    n3 <= s29_2;
initial n4 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n4 <= 1'b0;
  else if (i4 == 1'b1)
    n4 <= n3;
initial n5 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n5 <= 1'b0;
  else if (i4 == 1'b1)
    n5 <= n4;
initial n6 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n6 <= 1'b0;
  else if (i4 == 1'b1)
    n6 <= n5;
assign n7 = {s29_1[8],
  s29_1[7],
  s29_1[6],
  s29_1[5],
  s29_1[4],
  s29_1[3],
  s29_1[2],
  s29_1[1]};
initial n8 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n8 <= 8'b00000000;
  else if (i4 == 1'b1)
    n8 <= n7;
initial n9 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n9 <= 8'b00000000;
  else if (i4 == 1'b1)
    n9 <= n8;
initial n10 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n10 <= 8'b00000000;
  else if (i4 == 1'b1)
    n10 <= n9;
initial n11 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n11 <= 8'b00000000;
  else if (i4 == 1'b1)
    n11 <= n10;
assign n12 = s29_1[0];
initial n13 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n13 <= 1'b0;
  else if (i4 == 1'b1)
    n13 <= n12;
initial n14 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n14 <= 1'b0;
  else if (i4 == 1'b1)
    n14 <= n13;
initial n15 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n15 <= 1'b0;
  else if (i4 == 1'b1)
    n15 <= n14;
initial n16 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n16 <= 1'b0;
  else if (i4 == 1'b1)
    n16 <= n15;
assign n17 = ~n16;
assign n18 = {s28_2, s28_1};
assign n19 = {s28_3[71],
  s28_3[70],
  s28_3[69],
  s28_3[68],
  s28_3[67],
  s28_3[66],
  s28_3[65],
  s28_3[64],
  s28_3[63],
  s28_3[62],
  s28_3[61],
  s28_3[60],
  s28_3[59],
  s28_3[58],
  s28_3[57],
  s28_3[56],
  s28_3[55],
  s28_3[54],
  s28_3[53],
  s28_3[52],
  s28_3[51],
  s28_3[50],
  s28_3[49],
  s28_3[48],
  s28_3[47],
  s28_3[46],
  s28_3[45],
  s28_3[44],
  s28_3[43],
  s28_3[42],
  s28_3[41],
  s28_3[40],
  s28_3[39],
  s28_3[38],
  s28_3[37],
  s28_3[36]};
assign n20 = {s28_3[35],
  s28_3[34],
  s28_3[33],
  s28_3[32],
  s28_3[31],
  s28_3[30],
  s28_3[29],
  s28_3[28],
  s28_3[27],
  s28_3[26],
  s28_3[25],
  s28_3[24],
  s28_3[23],
  s28_3[22],
  s28_3[21],
  s28_3[20],
  s28_3[19],
  s28_3[18],
  s28_3[17],
  s28_3[16],
  s28_3[15],
  s28_3[14],
  s28_3[13],
  s28_3[12],
  s28_3[11],
  s28_3[10],
  s28_3[9],
  s28_3[8],
  s28_3[7],
  s28_3[6],
  s28_3[5],
  s28_3[4],
  s28_3[3],
  s28_3[2],
  s28_3[1],
  s28_3[0]};
assign n21 = {s27_1[71],
  s27_1[70],
  s27_1[69],
  s27_1[68],
  s27_1[67],
  s27_1[66],
  s27_1[65],
  s27_1[64],
  s27_1[63],
  s27_1[62],
  s27_1[61],
  s27_1[60],
  s27_1[59],
  s27_1[58],
  s27_1[57],
  s27_1[56],
  s27_1[55],
  s27_1[54],
  s27_1[53],
  s27_1[52],
  s27_1[51],
  s27_1[50],
  s27_1[49],
  s27_1[48],
  s27_1[47],
  s27_1[46],
  s27_1[45],
  s27_1[44],
  s27_1[43],
  s27_1[42],
  s27_1[41],
  s27_1[40],
  s27_1[39],
  s27_1[38],
  s27_1[37],
  s27_1[36]};
assign n22 = {s27_1[35],
  s27_1[34],
  s27_1[33],
  s27_1[32],
  s27_1[31],
  s27_1[30],
  s27_1[29],
  s27_1[28],
  s27_1[27],
  s27_1[26],
  s27_1[25],
  s27_1[24],
  s27_1[23],
  s27_1[22],
  s27_1[21],
  s27_1[20],
  s27_1[19],
  s27_1[18],
  s27_1[17],
  s27_1[16],
  s27_1[15],
  s27_1[14],
  s27_1[13],
  s27_1[12],
  s27_1[11],
  s27_1[10],
  s27_1[9],
  s27_1[8],
  s27_1[7],
  s27_1[6],
  s27_1[5],
  s27_1[4],
  s27_1[3],
  s27_1[2],
  s27_1[1],
  s27_1[0]};
assign n23 = s26_1 ? n20 : n19;
assign n24 = s26_1 ? n22 : n21;
cf_fft_1024_18_22 s25 (clock_c, i2, i3, n1, i4, i5, s25_1, s25_2);
cf_fft_1024_18_33 s26 (clock_c, n18, i4, i5, s26_1);
cf_fft_1024_18_29 s27 (clock_c, n2, n6, n11, n16, i4, i5, s27_1);
cf_fft_1024_18_28 s28 (clock_c, n2, n6, n11, n17, i4, i5, s28_1, s28_2, s28_3);
cf_fft_1024_18_24 s29 (clock_c, i1, i4, i5, s29_1, s29_2);
assign o3 = n24;
assign o2 = n23;
assign o1 = s28_1;
endmodule

module cf_fft_1024_18_22 (clock_c, i1, i2, i3, i4, i5, o1, o2);
input  clock_c;
input  [35:0] i1;
input  [35:0] i2;
input  [8:0] i3;
input  i4;
input  i5;
output [35:0] o1;
output [35:0] o2;
reg    [35:0] n1;
wire   [17:0] n2;
wire   [17:0] n3;
reg    [35:0] n4;
wire   [17:0] n5;
wire   [17:0] n6;
reg    [17:0] n7;
reg    [17:0] n8;
reg    [17:0] n9;
reg    [17:0] n10;
reg    [35:0] n11;
wire   [17:0] n12;
wire   [17:0] n13;
wire   [35:0] n14;
wire   [17:0] n15;
reg    [17:0] n16;
wire   [35:0] n17;
wire   [17:0] n18;
reg    [17:0] n19;
wire   [17:0] n20;
reg    [17:0] n21;
wire   [35:0] n22;
wire   [17:0] n23;
reg    [17:0] n24;
wire   [35:0] n25;
wire   [17:0] n26;
reg    [17:0] n27;
wire   [17:0] n28;
reg    [17:0] n29;
wire   [17:0] n30;
wire   [17:0] n31;
wire   [35:0] n32;
reg    [35:0] n33;
wire   [17:0] n34;
wire   [17:0] n35;
wire   [35:0] n36;
reg    [35:0] n37;
initial n1 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n1 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n1 <= i1;
assign n2 = {n1[35],
  n1[34],
  n1[33],
  n1[32],
  n1[31],
  n1[30],
  n1[29],
  n1[28],
  n1[27],
  n1[26],
  n1[25],
  n1[24],
  n1[23],
  n1[22],
  n1[21],
  n1[20],
  n1[19],
  n1[18]};
assign n3 = {n1[17],
  n1[16],
  n1[15],
  n1[14],
  n1[13],
  n1[12],
  n1[11],
  n1[10],
  n1[9],
  n1[8],
  n1[7],
  n1[6],
  n1[5],
  n1[4],
  n1[3],
  n1[2],
  n1[1],
  n1[0]};
initial n4 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n4 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n4 <= i2;
assign n5 = {n4[35],
  n4[34],
  n4[33],
  n4[32],
  n4[31],
  n4[30],
  n4[29],
  n4[28],
  n4[27],
  n4[26],
  n4[25],
  n4[24],
  n4[23],
  n4[22],
  n4[21],
  n4[20],
  n4[19],
  n4[18]};
assign n6 = {n4[17],
  n4[16],
  n4[15],
  n4[14],
  n4[13],
  n4[12],
  n4[11],
  n4[10],
  n4[9],
  n4[8],
  n4[7],
  n4[6],
  n4[5],
  n4[4],
  n4[3],
  n4[2],
  n4[1],
  n4[0]};
initial n7 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n7 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n7 <= n2;
initial n8 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n8 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n8 <= n7;
initial n9 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n9 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n9 <= n3;
initial n10 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n10 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n10 <= n9;
initial n11 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i4 == 1'b1)
    case (i3)
      9'b000000000 : n11 <= 36'b011111111111111111000000000000000000;
      9'b000000001 : n11 <= 36'b011111111111111101111111110011011011;
      9'b000000010 : n11 <= 36'b011111111111110110111111100110110111;
      9'b000000011 : n11 <= 36'b011111111111101001111111011010010011;
      9'b000000100 : n11 <= 36'b011111111111011000111111001101101111;
      9'b000000101 : n11 <= 36'b011111111111000010111111000001001011;
      9'b000000110 : n11 <= 36'b011111111110100111111110110100100111;
      9'b000000111 : n11 <= 36'b011111111110000111111110101000000011;
      9'b000001000 : n11 <= 36'b011111111101100010111110011011100000;
      9'b000001001 : n11 <= 36'b011111111100111000111110001110111101;
      9'b000001010 : n11 <= 36'b011111111100001001111110000010011010;
      9'b000001011 : n11 <= 36'b011111111011010101111101110101110111;
      9'b000001100 : n11 <= 36'b011111111010011100111101101001010101;
      9'b000001101 : n11 <= 36'b011111111001011111111101011100110011;
      9'b000001110 : n11 <= 36'b011111111000011100111101010000010010;
      9'b000001111 : n11 <= 36'b011111110111010101111101000011110001;
      9'b000010000 : n11 <= 36'b011111110110001000111100110111010000;
      9'b000010001 : n11 <= 36'b011111110100110111111100101010110000;
      9'b000010010 : n11 <= 36'b011111110011100001111100011110010000;
      9'b000010011 : n11 <= 36'b011111110010000110111100010001110001;
      9'b000010100 : n11 <= 36'b011111110000100110111100000101010011;
      9'b000010101 : n11 <= 36'b011111101111000001111011111000110101;
      9'b000010110 : n11 <= 36'b011111101101010111111011101100011000;
      9'b000010111 : n11 <= 36'b011111101011101000111011011111111011;
      9'b000011000 : n11 <= 36'b011111101001110101111011010011011111;
      9'b000011001 : n11 <= 36'b011111100111111100111011000111000100;
      9'b000011010 : n11 <= 36'b011111100101111111111010111010101010;
      9'b000011011 : n11 <= 36'b011111100011111101111010101110010000;
      9'b000011100 : n11 <= 36'b011111100001110110111010100001110111;
      9'b000011101 : n11 <= 36'b011111011111101010111010010101011111;
      9'b000011110 : n11 <= 36'b011111011101011001111010001001001000;
      9'b000011111 : n11 <= 36'b011111011011000011111001111100110010;
      9'b000100000 : n11 <= 36'b011111011000101001111001110000011101;
      9'b000100001 : n11 <= 36'b011111010110001010111001100100001000;
      9'b000100010 : n11 <= 36'b011111010011100110111001010111110101;
      9'b000100011 : n11 <= 36'b011111010000111101111001001011100011;
      9'b000100100 : n11 <= 36'b011111001110001111111000111111010001;
      9'b000100101 : n11 <= 36'b011111001011011100111000110011000001;
      9'b000100110 : n11 <= 36'b011111001000100101111000100110110010;
      9'b000100111 : n11 <= 36'b011111000101101000111000011010100100;
      9'b000101000 : n11 <= 36'b011111000010100111111000001110011000;
      9'b000101001 : n11 <= 36'b011110111111100010111000000010001100;
      9'b000101010 : n11 <= 36'b011110111100010111110111110110000010;
      9'b000101011 : n11 <= 36'b011110111001001000110111101001111001;
      9'b000101100 : n11 <= 36'b011110110101110100110111011101110001;
      9'b000101101 : n11 <= 36'b011110110010011011110111010001101010;
      9'b000101110 : n11 <= 36'b011110101110111101110111000101100101;
      9'b000101111 : n11 <= 36'b011110101011011011110110111001100010;
      9'b000110000 : n11 <= 36'b011110100111110100110110101101011111;
      9'b000110001 : n11 <= 36'b011110100100001000110110100001011110;
      9'b000110010 : n11 <= 36'b011110100000010111110110010101011111;
      9'b000110011 : n11 <= 36'b011110011100100010110110001001100001;
      9'b000110100 : n11 <= 36'b011110011000101000110101111101100101;
      9'b000110101 : n11 <= 36'b011110010100101001110101110001101010;
      9'b000110110 : n11 <= 36'b011110010000100110110101100101110000;
      9'b000110111 : n11 <= 36'b011110001100011110110101011001111001;
      9'b000111000 : n11 <= 36'b011110001000010010110101001110000011;
      9'b000111001 : n11 <= 36'b011110000100000000110101000010001110;
      9'b000111010 : n11 <= 36'b011101111111101010110100110110011100;
      9'b000111011 : n11 <= 36'b011101111011010000110100101010101011;
      9'b000111100 : n11 <= 36'b011101110110110001110100011110111011;
      9'b000111101 : n11 <= 36'b011101110010001101110100010011001110;
      9'b000111110 : n11 <= 36'b011101101101100101110100000111100010;
      9'b000111111 : n11 <= 36'b011101101000111000110011111011111000;
      9'b001000000 : n11 <= 36'b011101100100000110110011110000010000;
      9'b001000001 : n11 <= 36'b011101011111010000110011100100101010;
      9'b001000010 : n11 <= 36'b011101011010010110110011011001000110;
      9'b001000011 : n11 <= 36'b011101010101010110110011001101100100;
      9'b001000100 : n11 <= 36'b011101010000010011110011000010000100;
      9'b001000101 : n11 <= 36'b011101001011001011110010110110100101;
      9'b001000110 : n11 <= 36'b011101000101111110110010101011001001;
      9'b001000111 : n11 <= 36'b011101000000101101110010011111101111;
      9'b001001000 : n11 <= 36'b011100111011010111110010010100010111;
      9'b001001001 : n11 <= 36'b011100110101111101110010001001000001;
      9'b001001010 : n11 <= 36'b011100110000011111110001111101101101;
      9'b001001011 : n11 <= 36'b011100101010111100110001110010011100;
      9'b001001100 : n11 <= 36'b011100100101010100110001100111001100;
      9'b001001101 : n11 <= 36'b011100011111101000110001011011111111;
      9'b001001110 : n11 <= 36'b011100011001111000110001010000110100;
      9'b001001111 : n11 <= 36'b011100010100000100110001000101101011;
      9'b001010000 : n11 <= 36'b011100001110001011110000111010100101;
      9'b001010001 : n11 <= 36'b011100001000001101110000101111100000;
      9'b001010010 : n11 <= 36'b011100000010001100110000100100011111;
      9'b001010011 : n11 <= 36'b011011111100000110110000011001011111;
      9'b001010100 : n11 <= 36'b011011110101111100110000001110100010;
      9'b001010101 : n11 <= 36'b011011101111101101110000000011101000;
      9'b001010110 : n11 <= 36'b011011101001011010101111111000110000;
      9'b001010111 : n11 <= 36'b011011100011000011101111101101111010;
      9'b001011000 : n11 <= 36'b011011011100101000101111100011000111;
      9'b001011001 : n11 <= 36'b011011010110001000101111011000010110;
      9'b001011010 : n11 <= 36'b011011001111100100101111001101101000;
      9'b001011011 : n11 <= 36'b011011001000111100101111000010111101;
      9'b001011100 : n11 <= 36'b011011000010010000101110111000010100;
      9'b001011101 : n11 <= 36'b011010111011100000101110101101101110;
      9'b001011110 : n11 <= 36'b011010110100101011101110100011001011;
      9'b001011111 : n11 <= 36'b011010101101110011101110011000101010;
      9'b001100000 : n11 <= 36'b011010100110110110101110001110001100;
      9'b001100001 : n11 <= 36'b011010011111110101101110000011110000;
      9'b001100010 : n11 <= 36'b011010011000110000101101111001011000;
      9'b001100011 : n11 <= 36'b011010010001100111101101101111000010;
      9'b001100100 : n11 <= 36'b011010001010011010101101100100101111;
      9'b001100101 : n11 <= 36'b011010000011001001101101011010011111;
      9'b001100110 : n11 <= 36'b011001111011110100101101010000010010;
      9'b001100111 : n11 <= 36'b011001110100011011101101000110000111;
      9'b001101000 : n11 <= 36'b011001101100111110101100111100000000;
      9'b001101001 : n11 <= 36'b011001100101011100101100110001111011;
      9'b001101010 : n11 <= 36'b011001011101110111101100100111111010;
      9'b001101011 : n11 <= 36'b011001010110001110101100011101111011;
      9'b001101100 : n11 <= 36'b011001001110100010101100010100000000;
      9'b001101101 : n11 <= 36'b011001000110110001101100001010000111;
      9'b001101110 : n11 <= 36'b011000111110111100101100000000010010;
      9'b001101111 : n11 <= 36'b011000110111000100101011110110100000;
      9'b001110000 : n11 <= 36'b011000101111001000101011101100110000;
      9'b001110001 : n11 <= 36'b011000100111000111101011100011000100;
      9'b001110010 : n11 <= 36'b011000011111000100101011011001011011;
      9'b001110011 : n11 <= 36'b011000010110111100101011001111110101;
      9'b001110100 : n11 <= 36'b011000001110110000101011000110010011;
      9'b001110101 : n11 <= 36'b011000000110100001101010111100110011;
      9'b001110110 : n11 <= 36'b010111111110001110101010110011010111;
      9'b001110111 : n11 <= 36'b010111110101111000101010101001111110;
      9'b001111000 : n11 <= 36'b010111101101011101101010100000101001;
      9'b001111001 : n11 <= 36'b010111100101000000101010010111010111;
      9'b001111010 : n11 <= 36'b010111011100011110101010001110001000;
      9'b001111011 : n11 <= 36'b010111010011111001101010000100111100;
      9'b001111100 : n11 <= 36'b010111001011010000101001111011110100;
      9'b001111101 : n11 <= 36'b010111000010100100101001110010101111;
      9'b001111110 : n11 <= 36'b010110111001110100101001101001101110;
      9'b001111111 : n11 <= 36'b010110110001000000101001100000110000;
      9'b010000000 : n11 <= 36'b010110101000001001101001010111110110;
      9'b010000001 : n11 <= 36'b010110011111001111101001001110111111;
      9'b010000010 : n11 <= 36'b010110010110010001101001000110001011;
      9'b010000011 : n11 <= 36'b010110001101010000101000111101011011;
      9'b010000100 : n11 <= 36'b010110000100001011101000110100101111;
      9'b010000101 : n11 <= 36'b010101111011000011101000101100000110;
      9'b010000110 : n11 <= 36'b010101110001110111101000100011100001;
      9'b010000111 : n11 <= 36'b010101101000101000101000011010111111;
      9'b010001000 : n11 <= 36'b010101011111010110101000010010100010;
      9'b010001001 : n11 <= 36'b010101010110000001101000001010000111;
      9'b010001010 : n11 <= 36'b010101001100101000101000000001110001;
      9'b010001011 : n11 <= 36'b010101000011001100100111111001011110;
      9'b010001100 : n11 <= 36'b010100111001101100100111110001001111;
      9'b010001101 : n11 <= 36'b010100110000001010100111101001000011;
      9'b010001110 : n11 <= 36'b010100100110100100100111100000111011;
      9'b010001111 : n11 <= 36'b010100011100111011100111011000111000;
      9'b010010000 : n11 <= 36'b010100010011001111100111010000110111;
      9'b010010001 : n11 <= 36'b010100001001011111100111001000111011;
      9'b010010010 : n11 <= 36'b010011111111101101100111000001000011;
      9'b010010011 : n11 <= 36'b010011110101111000100110111001001110;
      9'b010010100 : n11 <= 36'b010011101011111111100110110001011101;
      9'b010010101 : n11 <= 36'b010011100010000100100110101001110001;
      9'b010010110 : n11 <= 36'b010011011000000101100110100010001000;
      9'b010010111 : n11 <= 36'b010011001110000100100110011010100011;
      9'b010011000 : n11 <= 36'b010011000011111111100110010011000001;
      9'b010011001 : n11 <= 36'b010010111001111000100110001011100100;
      9'b010011010 : n11 <= 36'b010010101111101101100110000100001011;
      9'b010011011 : n11 <= 36'b010010100101100000100101111100110110;
      9'b010011100 : n11 <= 36'b010010011011010000100101110101100101;
      9'b010011101 : n11 <= 36'b010010010000111101100101101110011000;
      9'b010011110 : n11 <= 36'b010010000110100111100101100111001111;
      9'b010011111 : n11 <= 36'b010001111100001111100101100000001010;
      9'b010100000 : n11 <= 36'b010001110001110011100101011001001001;
      9'b010100001 : n11 <= 36'b010001100111010101100101010010001100;
      9'b010100010 : n11 <= 36'b010001011100110100100101001011010100;
      9'b010100011 : n11 <= 36'b010001010010010001100101000100011111;
      9'b010100100 : n11 <= 36'b010001000111101011100100111101101111;
      9'b010100101 : n11 <= 36'b010000111101000010100100110111000011;
      9'b010100110 : n11 <= 36'b010000110010010111100100110000011011;
      9'b010100111 : n11 <= 36'b010000100111101001100100101001110111;
      9'b010101000 : n11 <= 36'b010000011100111000100100100011010111;
      9'b010101001 : n11 <= 36'b010000010010000101100100011100111100;
      9'b010101010 : n11 <= 36'b010000000111001111100100010110100101;
      9'b010101011 : n11 <= 36'b001111111100010111100100010000010010;
      9'b010101100 : n11 <= 36'b001111110001011101100100001010000011;
      9'b010101101 : n11 <= 36'b001111100110100000100100000011111001;
      9'b010101110 : n11 <= 36'b001111011011100000100011111101110011;
      9'b010101111 : n11 <= 36'b001111010000011111100011110111110010;
      9'b010110000 : n11 <= 36'b001111000101011010100011110001110100;
      9'b010110001 : n11 <= 36'b001110111010010100100011101011111011;
      9'b010110010 : n11 <= 36'b001110101111001011100011100110000111;
      9'b010110011 : n11 <= 36'b001110100100000000100011100000010111;
      9'b010110100 : n11 <= 36'b001110011000110011100011011010101011;
      9'b010110101 : n11 <= 36'b001110001101100011100011010101000011;
      9'b010110110 : n11 <= 36'b001110000010010010100011001111100000;
      9'b010110111 : n11 <= 36'b001101110110111110100011001010000010;
      9'b010111000 : n11 <= 36'b001101101011101000100011000100101000;
      9'b010111001 : n11 <= 36'b001101100000010000100010111111010010;
      9'b010111010 : n11 <= 36'b001101010100110110100010111010000001;
      9'b010111011 : n11 <= 36'b001101001001011010100010110100110100;
      9'b010111100 : n11 <= 36'b001100111101111011100010101111101100;
      9'b010111101 : n11 <= 36'b001100110010011011100010101010101001;
      9'b010111110 : n11 <= 36'b001100100110111001100010100101101001;
      9'b010111111 : n11 <= 36'b001100011011010101100010100000101111;
      9'b011000000 : n11 <= 36'b001100001111101111100010011011111001;
      9'b011000001 : n11 <= 36'b001100000100000111100010010111000111;
      9'b011000010 : n11 <= 36'b001011111000011101100010010010011010;
      9'b011000011 : n11 <= 36'b001011101100110001100010001101110010;
      9'b011000100 : n11 <= 36'b001011100001000100100010001001001110;
      9'b011000101 : n11 <= 36'b001011010101010100100010000100101111;
      9'b011000110 : n11 <= 36'b001011001001100011100010000000010101;
      9'b011000111 : n11 <= 36'b001010111101110001100001111011111111;
      9'b011001000 : n11 <= 36'b001010110001111100100001110111101101;
      9'b011001001 : n11 <= 36'b001010100110000110100001110011100001;
      9'b011001010 : n11 <= 36'b001010011010001111100001101111011001;
      9'b011001011 : n11 <= 36'b001010001110010101100001101011010110;
      9'b011001100 : n11 <= 36'b001010000010011010100001100111010111;
      9'b011001101 : n11 <= 36'b001001110110011110100001100011011101;
      9'b011001110 : n11 <= 36'b001001101010100000100001011111101000;
      9'b011001111 : n11 <= 36'b001001011110100001100001011011110111;
      9'b011010000 : n11 <= 36'b001001010010100000100001011000001011;
      9'b011010001 : n11 <= 36'b001001000110011101100001010100100100;
      9'b011010010 : n11 <= 36'b001000111010011010100001010001000010;
      9'b011010011 : n11 <= 36'b001000101110010101100001001101100100;
      9'b011010100 : n11 <= 36'b001000100010001110100001001010001011;
      9'b011010101 : n11 <= 36'b001000010110000110100001000110110111;
      9'b011010110 : n11 <= 36'b001000001001111101100001000011101000;
      9'b011010111 : n11 <= 36'b000111111101110011100001000000011101;
      9'b011011000 : n11 <= 36'b000111110001100111100000111101011000;
      9'b011011001 : n11 <= 36'b000111100101011011100000111010010111;
      9'b011011010 : n11 <= 36'b000111011001001101100000110111011010;
      9'b011011011 : n11 <= 36'b000111001100111110100000110100100011;
      9'b011011100 : n11 <= 36'b000111000000101110100000110001110000;
      9'b011011101 : n11 <= 36'b000110110100011100100000101111000010;
      9'b011011110 : n11 <= 36'b000110101000001010100000101100011001;
      9'b011011111 : n11 <= 36'b000110011011110111100000101001110101;
      9'b011100000 : n11 <= 36'b000110001111100010100000100111010110;
      9'b011100001 : n11 <= 36'b000110000011001101100000100100111100;
      9'b011100010 : n11 <= 36'b000101110110110111100000100010100110;
      9'b011100011 : n11 <= 36'b000101101010100000100000100000010101;
      9'b011100100 : n11 <= 36'b000101011110001000100000011110001001;
      9'b011100101 : n11 <= 36'b000101010001101111100000011100000010;
      9'b011100110 : n11 <= 36'b000101000101010101100000011010000000;
      9'b011100111 : n11 <= 36'b000100111000111011100000011000000011;
      9'b011101000 : n11 <= 36'b000100101100100000100000010110001010;
      9'b011101001 : n11 <= 36'b000100100000000100100000010100010111;
      9'b011101010 : n11 <= 36'b000100010011100111100000010010101000;
      9'b011101011 : n11 <= 36'b000100000111001010100000010000111110;
      9'b011101100 : n11 <= 36'b000011111010101100100000001111011001;
      9'b011101101 : n11 <= 36'b000011101110001110100000001101111001;
      9'b011101110 : n11 <= 36'b000011100001101111100000001100011110;
      9'b011101111 : n11 <= 36'b000011010101001111100000001011001000;
      9'b011110000 : n11 <= 36'b000011001000101111100000001001110111;
      9'b011110001 : n11 <= 36'b000010111100001110100000001000101010;
      9'b011110010 : n11 <= 36'b000010101111101101100000000111100011;
      9'b011110011 : n11 <= 36'b000010100011001100100000000110100000;
      9'b011110100 : n11 <= 36'b000010010110101010100000000101100011;
      9'b011110101 : n11 <= 36'b000010001010001000100000000100101010;
      9'b011110110 : n11 <= 36'b000001111101100101100000000011110110;
      9'b011110111 : n11 <= 36'b000001110001000010100000000011000111;
      9'b011111000 : n11 <= 36'b000001100100011111100000000010011101;
      9'b011111001 : n11 <= 36'b000001010111111100100000000001111000;
      9'b011111010 : n11 <= 36'b000001001011011000100000000001011000;
      9'b011111011 : n11 <= 36'b000000111110110100100000000000111101;
      9'b011111100 : n11 <= 36'b000000110010010000100000000000100111;
      9'b011111101 : n11 <= 36'b000000100101101100100000000000010110;
      9'b011111110 : n11 <= 36'b000000011001001000100000000000001001;
      9'b011111111 : n11 <= 36'b000000001100100100100000000000000010;
      9'b100000000 : n11 <= 36'b000000000000000000100000000000000000;
      9'b100000001 : n11 <= 36'b111111110011011011100000000000000010;
      9'b100000010 : n11 <= 36'b111111100110110111100000000000001001;
      9'b100000011 : n11 <= 36'b111111011010010011100000000000010110;
      9'b100000100 : n11 <= 36'b111111001101101111100000000000100111;
      9'b100000101 : n11 <= 36'b111111000001001011100000000000111101;
      9'b100000110 : n11 <= 36'b111110110100100111100000000001011000;
      9'b100000111 : n11 <= 36'b111110101000000011100000000001111000;
      9'b100001000 : n11 <= 36'b111110011011100000100000000010011101;
      9'b100001001 : n11 <= 36'b111110001110111101100000000011000111;
      9'b100001010 : n11 <= 36'b111110000010011010100000000011110110;
      9'b100001011 : n11 <= 36'b111101110101110111100000000100101010;
      9'b100001100 : n11 <= 36'b111101101001010101100000000101100011;
      9'b100001101 : n11 <= 36'b111101011100110011100000000110100000;
      9'b100001110 : n11 <= 36'b111101010000010010100000000111100011;
      9'b100001111 : n11 <= 36'b111101000011110001100000001000101010;
      9'b100010000 : n11 <= 36'b111100110111010000100000001001110111;
      9'b100010001 : n11 <= 36'b111100101010110000100000001011001000;
      9'b100010010 : n11 <= 36'b111100011110010000100000001100011110;
      9'b100010011 : n11 <= 36'b111100010001110001100000001101111001;
      9'b100010100 : n11 <= 36'b111100000101010011100000001111011001;
      9'b100010101 : n11 <= 36'b111011111000110101100000010000111110;
      9'b100010110 : n11 <= 36'b111011101100011000100000010010101000;
      9'b100010111 : n11 <= 36'b111011011111111011100000010100010111;
      9'b100011000 : n11 <= 36'b111011010011011111100000010110001010;
      9'b100011001 : n11 <= 36'b111011000111000100100000011000000011;
      9'b100011010 : n11 <= 36'b111010111010101010100000011010000000;
      9'b100011011 : n11 <= 36'b111010101110010000100000011100000010;
      9'b100011100 : n11 <= 36'b111010100001110111100000011110001001;
      9'b100011101 : n11 <= 36'b111010010101011111100000100000010101;
      9'b100011110 : n11 <= 36'b111010001001001000100000100010100110;
      9'b100011111 : n11 <= 36'b111001111100110010100000100100111100;
      9'b100100000 : n11 <= 36'b111001110000011101100000100111010110;
      9'b100100001 : n11 <= 36'b111001100100001000100000101001110101;
      9'b100100010 : n11 <= 36'b111001010111110101100000101100011001;
      9'b100100011 : n11 <= 36'b111001001011100011100000101111000010;
      9'b100100100 : n11 <= 36'b111000111111010001100000110001110000;
      9'b100100101 : n11 <= 36'b111000110011000001100000110100100011;
      9'b100100110 : n11 <= 36'b111000100110110010100000110111011010;
      9'b100100111 : n11 <= 36'b111000011010100100100000111010010111;
      9'b100101000 : n11 <= 36'b111000001110011000100000111101011000;
      9'b100101001 : n11 <= 36'b111000000010001100100001000000011101;
      9'b100101010 : n11 <= 36'b110111110110000010100001000011101000;
      9'b100101011 : n11 <= 36'b110111101001111001100001000110110111;
      9'b100101100 : n11 <= 36'b110111011101110001100001001010001011;
      9'b100101101 : n11 <= 36'b110111010001101010100001001101100100;
      9'b100101110 : n11 <= 36'b110111000101100101100001010001000010;
      9'b100101111 : n11 <= 36'b110110111001100010100001010100100100;
      9'b100110000 : n11 <= 36'b110110101101011111100001011000001011;
      9'b100110001 : n11 <= 36'b110110100001011110100001011011110111;
      9'b100110010 : n11 <= 36'b110110010101011111100001011111101000;
      9'b100110011 : n11 <= 36'b110110001001100001100001100011011101;
      9'b100110100 : n11 <= 36'b110101111101100101100001100111010111;
      9'b100110101 : n11 <= 36'b110101110001101010100001101011010110;
      9'b100110110 : n11 <= 36'b110101100101110000100001101111011001;
      9'b100110111 : n11 <= 36'b110101011001111001100001110011100001;
      9'b100111000 : n11 <= 36'b110101001110000011100001110111101101;
      9'b100111001 : n11 <= 36'b110101000010001110100001111011111111;
      9'b100111010 : n11 <= 36'b110100110110011100100010000000010101;
      9'b100111011 : n11 <= 36'b110100101010101011100010000100101111;
      9'b100111100 : n11 <= 36'b110100011110111011100010001001001110;
      9'b100111101 : n11 <= 36'b110100010011001110100010001101110010;
      9'b100111110 : n11 <= 36'b110100000111100010100010010010011010;
      9'b100111111 : n11 <= 36'b110011111011111000100010010111000111;
      9'b101000000 : n11 <= 36'b110011110000010000100010011011111001;
      9'b101000001 : n11 <= 36'b110011100100101010100010100000101111;
      9'b101000010 : n11 <= 36'b110011011001000110100010100101101001;
      9'b101000011 : n11 <= 36'b110011001101100100100010101010101001;
      9'b101000100 : n11 <= 36'b110011000010000100100010101111101100;
      9'b101000101 : n11 <= 36'b110010110110100101100010110100110100;
      9'b101000110 : n11 <= 36'b110010101011001001100010111010000001;
      9'b101000111 : n11 <= 36'b110010011111101111100010111111010010;
      9'b101001000 : n11 <= 36'b110010010100010111100011000100101000;
      9'b101001001 : n11 <= 36'b110010001001000001100011001010000010;
      9'b101001010 : n11 <= 36'b110001111101101101100011001111100000;
      9'b101001011 : n11 <= 36'b110001110010011100100011010101000011;
      9'b101001100 : n11 <= 36'b110001100111001100100011011010101011;
      9'b101001101 : n11 <= 36'b110001011011111111100011100000010111;
      9'b101001110 : n11 <= 36'b110001010000110100100011100110000111;
      9'b101001111 : n11 <= 36'b110001000101101011100011101011111011;
      9'b101010000 : n11 <= 36'b110000111010100101100011110001110100;
      9'b101010001 : n11 <= 36'b110000101111100000100011110111110010;
      9'b101010010 : n11 <= 36'b110000100100011111100011111101110011;
      9'b101010011 : n11 <= 36'b110000011001011111100100000011111001;
      9'b101010100 : n11 <= 36'b110000001110100010100100001010000011;
      9'b101010101 : n11 <= 36'b110000000011101000100100010000010010;
      9'b101010110 : n11 <= 36'b101111111000110000100100010110100101;
      9'b101010111 : n11 <= 36'b101111101101111010100100011100111100;
      9'b101011000 : n11 <= 36'b101111100011000111100100100011010111;
      9'b101011001 : n11 <= 36'b101111011000010110100100101001110111;
      9'b101011010 : n11 <= 36'b101111001101101000100100110000011011;
      9'b101011011 : n11 <= 36'b101111000010111101100100110111000011;
      9'b101011100 : n11 <= 36'b101110111000010100100100111101101111;
      9'b101011101 : n11 <= 36'b101110101101101110100101000100011111;
      9'b101011110 : n11 <= 36'b101110100011001011100101001011010100;
      9'b101011111 : n11 <= 36'b101110011000101010100101010010001100;
      9'b101100000 : n11 <= 36'b101110001110001100100101011001001001;
      9'b101100001 : n11 <= 36'b101110000011110000100101100000001010;
      9'b101100010 : n11 <= 36'b101101111001011000100101100111001111;
      9'b101100011 : n11 <= 36'b101101101111000010100101101110011000;
      9'b101100100 : n11 <= 36'b101101100100101111100101110101100101;
      9'b101100101 : n11 <= 36'b101101011010011111100101111100110110;
      9'b101100110 : n11 <= 36'b101101010000010010100110000100001011;
      9'b101100111 : n11 <= 36'b101101000110000111100110001011100100;
      9'b101101000 : n11 <= 36'b101100111100000000100110010011000001;
      9'b101101001 : n11 <= 36'b101100110001111011100110011010100011;
      9'b101101010 : n11 <= 36'b101100100111111010100110100010001000;
      9'b101101011 : n11 <= 36'b101100011101111011100110101001110001;
      9'b101101100 : n11 <= 36'b101100010100000000100110110001011101;
      9'b101101101 : n11 <= 36'b101100001010000111100110111001001110;
      9'b101101110 : n11 <= 36'b101100000000010010100111000001000011;
      9'b101101111 : n11 <= 36'b101011110110100000100111001000111011;
      9'b101110000 : n11 <= 36'b101011101100110000100111010000110111;
      9'b101110001 : n11 <= 36'b101011100011000100100111011000111000;
      9'b101110010 : n11 <= 36'b101011011001011011100111100000111011;
      9'b101110011 : n11 <= 36'b101011001111110101100111101001000011;
      9'b101110100 : n11 <= 36'b101011000110010011100111110001001111;
      9'b101110101 : n11 <= 36'b101010111100110011100111111001011110;
      9'b101110110 : n11 <= 36'b101010110011010111101000000001110001;
      9'b101110111 : n11 <= 36'b101010101001111110101000001010000111;
      9'b101111000 : n11 <= 36'b101010100000101001101000010010100010;
      9'b101111001 : n11 <= 36'b101010010111010111101000011010111111;
      9'b101111010 : n11 <= 36'b101010001110001000101000100011100001;
      9'b101111011 : n11 <= 36'b101010000100111100101000101100000110;
      9'b101111100 : n11 <= 36'b101001111011110100101000110100101111;
      9'b101111101 : n11 <= 36'b101001110010101111101000111101011011;
      9'b101111110 : n11 <= 36'b101001101001101110101001000110001011;
      9'b101111111 : n11 <= 36'b101001100000110000101001001110111111;
      9'b110000000 : n11 <= 36'b101001010111110110101001010111110110;
      9'b110000001 : n11 <= 36'b101001001110111111101001100000110000;
      9'b110000010 : n11 <= 36'b101001000110001011101001101001101110;
      9'b110000011 : n11 <= 36'b101000111101011011101001110010101111;
      9'b110000100 : n11 <= 36'b101000110100101111101001111011110100;
      9'b110000101 : n11 <= 36'b101000101100000110101010000100111100;
      9'b110000110 : n11 <= 36'b101000100011100001101010001110001000;
      9'b110000111 : n11 <= 36'b101000011010111111101010010111010111;
      9'b110001000 : n11 <= 36'b101000010010100010101010100000101001;
      9'b110001001 : n11 <= 36'b101000001010000111101010101001111110;
      9'b110001010 : n11 <= 36'b101000000001110001101010110011010111;
      9'b110001011 : n11 <= 36'b100111111001011110101010111100110011;
      9'b110001100 : n11 <= 36'b100111110001001111101011000110010011;
      9'b110001101 : n11 <= 36'b100111101001000011101011001111110101;
      9'b110001110 : n11 <= 36'b100111100000111011101011011001011011;
      9'b110001111 : n11 <= 36'b100111011000111000101011100011000100;
      9'b110010000 : n11 <= 36'b100111010000110111101011101100110000;
      9'b110010001 : n11 <= 36'b100111001000111011101011110110100000;
      9'b110010010 : n11 <= 36'b100111000001000011101100000000010010;
      9'b110010011 : n11 <= 36'b100110111001001110101100001010000111;
      9'b110010100 : n11 <= 36'b100110110001011101101100010100000000;
      9'b110010101 : n11 <= 36'b100110101001110001101100011101111011;
      9'b110010110 : n11 <= 36'b100110100010001000101100100111111010;
      9'b110010111 : n11 <= 36'b100110011010100011101100110001111011;
      9'b110011000 : n11 <= 36'b100110010011000001101100111100000000;
      9'b110011001 : n11 <= 36'b100110001011100100101101000110000111;
      9'b110011010 : n11 <= 36'b100110000100001011101101010000010010;
      9'b110011011 : n11 <= 36'b100101111100110110101101011010011111;
      9'b110011100 : n11 <= 36'b100101110101100101101101100100101111;
      9'b110011101 : n11 <= 36'b100101101110011000101101101111000010;
      9'b110011110 : n11 <= 36'b100101100111001111101101111001011000;
      9'b110011111 : n11 <= 36'b100101100000001010101110000011110000;
      9'b110100000 : n11 <= 36'b100101011001001001101110001110001100;
      9'b110100001 : n11 <= 36'b100101010010001100101110011000101010;
      9'b110100010 : n11 <= 36'b100101001011010100101110100011001011;
      9'b110100011 : n11 <= 36'b100101000100011111101110101101101110;
      9'b110100100 : n11 <= 36'b100100111101101111101110111000010100;
      9'b110100101 : n11 <= 36'b100100110111000011101111000010111101;
      9'b110100110 : n11 <= 36'b100100110000011011101111001101101000;
      9'b110100111 : n11 <= 36'b100100101001110111101111011000010110;
      9'b110101000 : n11 <= 36'b100100100011010111101111100011000111;
      9'b110101001 : n11 <= 36'b100100011100111100101111101101111010;
      9'b110101010 : n11 <= 36'b100100010110100101101111111000110000;
      9'b110101011 : n11 <= 36'b100100010000010010110000000011101000;
      9'b110101100 : n11 <= 36'b100100001010000011110000001110100010;
      9'b110101101 : n11 <= 36'b100100000011111001110000011001011111;
      9'b110101110 : n11 <= 36'b100011111101110011110000100100011111;
      9'b110101111 : n11 <= 36'b100011110111110010110000101111100000;
      9'b110110000 : n11 <= 36'b100011110001110100110000111010100101;
      9'b110110001 : n11 <= 36'b100011101011111011110001000101101011;
      9'b110110010 : n11 <= 36'b100011100110000111110001010000110100;
      9'b110110011 : n11 <= 36'b100011100000010111110001011011111111;
      9'b110110100 : n11 <= 36'b100011011010101011110001100111001100;
      9'b110110101 : n11 <= 36'b100011010101000011110001110010011100;
      9'b110110110 : n11 <= 36'b100011001111100000110001111101101101;
      9'b110110111 : n11 <= 36'b100011001010000010110010001001000001;
      9'b110111000 : n11 <= 36'b100011000100101000110010010100010111;
      9'b110111001 : n11 <= 36'b100010111111010010110010011111101111;
      9'b110111010 : n11 <= 36'b100010111010000001110010101011001001;
      9'b110111011 : n11 <= 36'b100010110100110100110010110110100101;
      9'b110111100 : n11 <= 36'b100010101111101100110011000010000100;
      9'b110111101 : n11 <= 36'b100010101010101001110011001101100100;
      9'b110111110 : n11 <= 36'b100010100101101001110011011001000110;
      9'b110111111 : n11 <= 36'b100010100000101111110011100100101010;
      9'b111000000 : n11 <= 36'b100010011011111001110011110000010000;
      9'b111000001 : n11 <= 36'b100010010111000111110011111011111000;
      9'b111000010 : n11 <= 36'b100010010010011010110100000111100010;
      9'b111000011 : n11 <= 36'b100010001101110010110100010011001110;
      9'b111000100 : n11 <= 36'b100010001001001110110100011110111011;
      9'b111000101 : n11 <= 36'b100010000100101111110100101010101011;
      9'b111000110 : n11 <= 36'b100010000000010101110100110110011100;
      9'b111000111 : n11 <= 36'b100001111011111111110101000010001110;
      9'b111001000 : n11 <= 36'b100001110111101101110101001110000011;
      9'b111001001 : n11 <= 36'b100001110011100001110101011001111001;
      9'b111001010 : n11 <= 36'b100001101111011001110101100101110000;
      9'b111001011 : n11 <= 36'b100001101011010110110101110001101010;
      9'b111001100 : n11 <= 36'b100001100111010111110101111101100101;
      9'b111001101 : n11 <= 36'b100001100011011101110110001001100001;
      9'b111001110 : n11 <= 36'b100001011111101000110110010101011111;
      9'b111001111 : n11 <= 36'b100001011011110111110110100001011110;
      9'b111010000 : n11 <= 36'b100001011000001011110110101101011111;
      9'b111010001 : n11 <= 36'b100001010100100100110110111001100010;
      9'b111010010 : n11 <= 36'b100001010001000010110111000101100101;
      9'b111010011 : n11 <= 36'b100001001101100100110111010001101010;
      9'b111010100 : n11 <= 36'b100001001010001011110111011101110001;
      9'b111010101 : n11 <= 36'b100001000110110111110111101001111001;
      9'b111010110 : n11 <= 36'b100001000011101000110111110110000010;
      9'b111010111 : n11 <= 36'b100001000000011101111000000010001100;
      9'b111011000 : n11 <= 36'b100000111101011000111000001110011000;
      9'b111011001 : n11 <= 36'b100000111010010111111000011010100100;
      9'b111011010 : n11 <= 36'b100000110111011010111000100110110010;
      9'b111011011 : n11 <= 36'b100000110100100011111000110011000001;
      9'b111011100 : n11 <= 36'b100000110001110000111000111111010001;
      9'b111011101 : n11 <= 36'b100000101111000010111001001011100011;
      9'b111011110 : n11 <= 36'b100000101100011001111001010111110101;
      9'b111011111 : n11 <= 36'b100000101001110101111001100100001000;
      9'b111100000 : n11 <= 36'b100000100111010110111001110000011101;
      9'b111100001 : n11 <= 36'b100000100100111100111001111100110010;
      9'b111100010 : n11 <= 36'b100000100010100110111010001001001000;
      9'b111100011 : n11 <= 36'b100000100000010101111010010101011111;
      9'b111100100 : n11 <= 36'b100000011110001001111010100001110111;
      9'b111100101 : n11 <= 36'b100000011100000010111010101110010000;
      9'b111100110 : n11 <= 36'b100000011010000000111010111010101010;
      9'b111100111 : n11 <= 36'b100000011000000011111011000111000100;
      9'b111101000 : n11 <= 36'b100000010110001010111011010011011111;
      9'b111101001 : n11 <= 36'b100000010100010111111011011111111011;
      9'b111101010 : n11 <= 36'b100000010010101000111011101100011000;
      9'b111101011 : n11 <= 36'b100000010000111110111011111000110101;
      9'b111101100 : n11 <= 36'b100000001111011001111100000101010011;
      9'b111101101 : n11 <= 36'b100000001101111001111100010001110001;
      9'b111101110 : n11 <= 36'b100000001100011110111100011110010000;
      9'b111101111 : n11 <= 36'b100000001011001000111100101010110000;
      9'b111110000 : n11 <= 36'b100000001001110111111100110111010000;
      9'b111110001 : n11 <= 36'b100000001000101010111101000011110001;
      9'b111110010 : n11 <= 36'b100000000111100011111101010000010010;
      9'b111110011 : n11 <= 36'b100000000110100000111101011100110011;
      9'b111110100 : n11 <= 36'b100000000101100011111101101001010101;
      9'b111110101 : n11 <= 36'b100000000100101010111101110101110111;
      9'b111110110 : n11 <= 36'b100000000011110110111110000010011010;
      9'b111110111 : n11 <= 36'b100000000011000111111110001110111101;
      9'b111111000 : n11 <= 36'b100000000010011101111110011011100000;
      9'b111111001 : n11 <= 36'b100000000001111000111110101000000011;
      9'b111111010 : n11 <= 36'b100000000001011000111110110100100111;
      9'b111111011 : n11 <= 36'b100000000000111101111111000001001011;
      9'b111111100 : n11 <= 36'b100000000000100111111111001101101111;
      9'b111111101 : n11 <= 36'b100000000000010110111111011010010011;
      9'b111111110 : n11 <= 36'b100000000000001001111111100110110111;
      9'b111111111 : n11 <= 36'b100000000000000010111111110011011011;
      default : n11 <= 36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    endcase
assign n12 = {n11[35],
  n11[34],
  n11[33],
  n11[32],
  n11[31],
  n11[30],
  n11[29],
  n11[28],
  n11[27],
  n11[26],
  n11[25],
  n11[24],
  n11[23],
  n11[22],
  n11[21],
  n11[20],
  n11[19],
  n11[18]};
assign n13 = {n11[17],
  n11[16],
  n11[15],
  n11[14],
  n11[13],
  n11[12],
  n11[11],
  n11[10],
  n11[9],
  n11[8],
  n11[7],
  n11[6],
  n11[5],
  n11[4],
  n11[3],
  n11[2],
  n11[1],
  n11[0]};
assign n14 = {{18{n5[17]}}, n5} * {{18{n12[17]}}, n12};
assign n15 = {n14[34],
  n14[33],
  n14[32],
  n14[31],
  n14[30],
  n14[29],
  n14[28],
  n14[27],
  n14[26],
  n14[25],
  n14[24],
  n14[23],
  n14[22],
  n14[21],
  n14[20],
  n14[19],
  n14[18],
  n14[17]};
initial n16 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n16 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n16 <= n15;
assign n17 = {{18{n6[17]}}, n6} * {{18{n13[17]}}, n13};
assign n18 = {n17[34],
  n17[33],
  n17[32],
  n17[31],
  n17[30],
  n17[29],
  n17[28],
  n17[27],
  n17[26],
  n17[25],
  n17[24],
  n17[23],
  n17[22],
  n17[21],
  n17[20],
  n17[19],
  n17[18],
  n17[17]};
initial n19 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n19 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n19 <= n18;
assign n20 = n16 - n19;
initial n21 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n21 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n21 <= n20;
assign n22 = {{18{n5[17]}}, n5} * {{18{n13[17]}}, n13};
assign n23 = {n22[34],
  n22[33],
  n22[32],
  n22[31],
  n22[30],
  n22[29],
  n22[28],
  n22[27],
  n22[26],
  n22[25],
  n22[24],
  n22[23],
  n22[22],
  n22[21],
  n22[20],
  n22[19],
  n22[18],
  n22[17]};
initial n24 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n24 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n24 <= n23;
assign n25 = {{18{n6[17]}}, n6} * {{18{n12[17]}}, n12};
assign n26 = {n25[34],
  n25[33],
  n25[32],
  n25[31],
  n25[30],
  n25[29],
  n25[28],
  n25[27],
  n25[26],
  n25[25],
  n25[24],
  n25[23],
  n25[22],
  n25[21],
  n25[20],
  n25[19],
  n25[18],
  n25[17]};
initial n27 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n27 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n27 <= n26;
assign n28 = n24 + n27;
initial n29 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n29 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n29 <= n28;
assign n30 = n8 + n21;
assign n31 = n10 + n29;
assign n32 = {n30, n31};
initial n33 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n33 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n33 <= n32;
assign n34 = n8 - n21;
assign n35 = n10 - n29;
assign n36 = {n34, n35};
initial n37 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n37 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n37 <= n36;
assign o2 = n37;
assign o1 = n33;
endmodule

module cf_fft_1024_18_23 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  [35:0] i2;
input  [35:0] i3;
input  i4;
input  i5;
output o1;
output [35:0] o2;
output [35:0] o3;
wire   n1;
wire   [71:0] n2;
reg    n3;
reg    n4;
reg    n5;
reg    n6;
wire   [7:0] n7;
reg    [7:0] n8;
reg    [7:0] n9;
reg    [7:0] n10;
reg    [7:0] n11;
wire   n12;
reg    n13;
reg    n14;
reg    n15;
reg    n16;
wire   n17;
wire   [1:0] n18;
wire   [35:0] n19;
wire   [35:0] n20;
wire   [35:0] n21;
wire   [35:0] n22;
wire   [35:0] n23;
wire   [35:0] n24;
wire   [35:0] s25_1;
wire   [35:0] s25_2;
wire   s26_1;
wire   [71:0] s27_1;
wire   s28_1;
wire   s28_2;
wire   [71:0] s28_3;
wire   [8:0] s29_1;
wire   s29_2;
assign n1 = s29_1[8];
assign n2 = {s25_1, s25_2};
initial n3 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n3 <= 1'b0;
  else if (i4 == 1'b1)
    n3 <= s29_2;
initial n4 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n4 <= 1'b0;
  else if (i4 == 1'b1)
    n4 <= n3;
initial n5 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n5 <= 1'b0;
  else if (i4 == 1'b1)
    n5 <= n4;
initial n6 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n6 <= 1'b0;
  else if (i4 == 1'b1)
    n6 <= n5;
assign n7 = {s29_1[8],
  s29_1[7],
  s29_1[6],
  s29_1[5],
  s29_1[4],
  s29_1[3],
  s29_1[2],
  s29_1[1]};
initial n8 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n8 <= 8'b00000000;
  else if (i4 == 1'b1)
    n8 <= n7;
initial n9 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n9 <= 8'b00000000;
  else if (i4 == 1'b1)
    n9 <= n8;
initial n10 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n10 <= 8'b00000000;
  else if (i4 == 1'b1)
    n10 <= n9;
initial n11 = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n11 <= 8'b00000000;
  else if (i4 == 1'b1)
    n11 <= n10;
assign n12 = s29_1[0];
initial n13 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n13 <= 1'b0;
  else if (i4 == 1'b1)
    n13 <= n12;
initial n14 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n14 <= 1'b0;
  else if (i4 == 1'b1)
    n14 <= n13;
initial n15 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n15 <= 1'b0;
  else if (i4 == 1'b1)
    n15 <= n14;
initial n16 = 1'b0;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n16 <= 1'b0;
  else if (i4 == 1'b1)
    n16 <= n15;
assign n17 = ~n16;
assign n18 = {s28_2, s28_1};
assign n19 = {s28_3[71],
  s28_3[70],
  s28_3[69],
  s28_3[68],
  s28_3[67],
  s28_3[66],
  s28_3[65],
  s28_3[64],
  s28_3[63],
  s28_3[62],
  s28_3[61],
  s28_3[60],
  s28_3[59],
  s28_3[58],
  s28_3[57],
  s28_3[56],
  s28_3[55],
  s28_3[54],
  s28_3[53],
  s28_3[52],
  s28_3[51],
  s28_3[50],
  s28_3[49],
  s28_3[48],
  s28_3[47],
  s28_3[46],
  s28_3[45],
  s28_3[44],
  s28_3[43],
  s28_3[42],
  s28_3[41],
  s28_3[40],
  s28_3[39],
  s28_3[38],
  s28_3[37],
  s28_3[36]};
assign n20 = {s28_3[35],
  s28_3[34],
  s28_3[33],
  s28_3[32],
  s28_3[31],
  s28_3[30],
  s28_3[29],
  s28_3[28],
  s28_3[27],
  s28_3[26],
  s28_3[25],
  s28_3[24],
  s28_3[23],
  s28_3[22],
  s28_3[21],
  s28_3[20],
  s28_3[19],
  s28_3[18],
  s28_3[17],
  s28_3[16],
  s28_3[15],
  s28_3[14],
  s28_3[13],
  s28_3[12],
  s28_3[11],
  s28_3[10],
  s28_3[9],
  s28_3[8],
  s28_3[7],
  s28_3[6],
  s28_3[5],
  s28_3[4],
  s28_3[3],
  s28_3[2],
  s28_3[1],
  s28_3[0]};
assign n21 = {s27_1[71],
  s27_1[70],
  s27_1[69],
  s27_1[68],
  s27_1[67],
  s27_1[66],
  s27_1[65],
  s27_1[64],
  s27_1[63],
  s27_1[62],
  s27_1[61],
  s27_1[60],
  s27_1[59],
  s27_1[58],
  s27_1[57],
  s27_1[56],
  s27_1[55],
  s27_1[54],
  s27_1[53],
  s27_1[52],
  s27_1[51],
  s27_1[50],
  s27_1[49],
  s27_1[48],
  s27_1[47],
  s27_1[46],
  s27_1[45],
  s27_1[44],
  s27_1[43],
  s27_1[42],
  s27_1[41],
  s27_1[40],
  s27_1[39],
  s27_1[38],
  s27_1[37],
  s27_1[36]};
assign n22 = {s27_1[35],
  s27_1[34],
  s27_1[33],
  s27_1[32],
  s27_1[31],
  s27_1[30],
  s27_1[29],
  s27_1[28],
  s27_1[27],
  s27_1[26],
  s27_1[25],
  s27_1[24],
  s27_1[23],
  s27_1[22],
  s27_1[21],
  s27_1[20],
  s27_1[19],
  s27_1[18],
  s27_1[17],
  s27_1[16],
  s27_1[15],
  s27_1[14],
  s27_1[13],
  s27_1[12],
  s27_1[11],
  s27_1[10],
  s27_1[9],
  s27_1[8],
  s27_1[7],
  s27_1[6],
  s27_1[5],
  s27_1[4],
  s27_1[3],
  s27_1[2],
  s27_1[1],
  s27_1[0]};
assign n23 = s26_1 ? n20 : n19;
assign n24 = s26_1 ? n22 : n21;
cf_fft_1024_18_39 s25 (clock_c, i2, i3, n1, i4, i5, s25_1, s25_2);
cf_fft_1024_18_33 s26 (clock_c, n18, i4, i5, s26_1);
cf_fft_1024_18_29 s27 (clock_c, n2, n6, n11, n16, i4, i5, s27_1);
cf_fft_1024_18_28 s28 (clock_c, n2, n6, n11, n17, i4, i5, s28_1, s28_2, s28_3);
cf_fft_1024_18_24 s29 (clock_c, i1, i4, i5, s29_1, s29_2);
assign o3 = n24;
assign o2 = n23;
assign o1 = s28_1;
endmodule

module cf_fft_1024_18_24 (clock_c, i1, i2, i3, o1, o2);
input  clock_c;
input  i1;
input  i2;
input  i3;
output [8:0] o1;
output o2;
wire   [8:0] n1;
wire   [8:0] n2;
reg    [8:0] n3;
wire   [8:0] n4;
wire   n5;
wire   [1:0] n6;
reg    n7;
wire   n8;
wire   n9;
wire   n10;
wire   s11_1;
assign n1 = 9'b000000001;
assign n2 = n3 + n1;
initial n3 = 9'b000000000;
always @ (posedge clock_c)
  if (n9 == 1'b1)
    n3 <= 9'b000000000;
  else if (n10 == 1'b1)
    n3 <= n2;
assign n4 = 9'b111111111;
assign n5 = n3 == n4;
assign n6 = {i1, n5};
initial n7 = 1'b0;
always @ (posedge clock_c)
  if (i3 == 1'b1)
    n7 <= 1'b0;
  else if (i2 == 1'b1)
    n7 <= s11_1;
assign n8 = n7 & n5;
assign n9 = i1 | i3;
assign n10 = s11_1 & i2;
cf_fft_1024_18_25 s11 (clock_c, n6, i2, i3, s11_1);
assign o2 = n8;
assign o1 = n3;
endmodule

module cf_fft_1024_18_25 (clock_c, i1, i2, i3, o1);
input  clock_c;
input  [1:0] i1;
input  i2;
input  i3;
output o1;
wire   n1;
wire   n2;
wire   n3;
wire   n4;
wire   n5;
wire   n6;
wire   n7;
wire   n8;
wire   n9;
wire   n10;
wire   n11;
wire   n12;
wire   [2:0] n13;
reg    n14;
wire   s15_1;
wire   s16_1;
assign n1 = 1'b0;
assign n2 = 1'b1;
assign n3 = 1'b1;
assign n4 = 1'b1;
assign n5 = 1'b0;
assign n6 = 1'b0;
assign n7 = 1'b0;
assign n8 = 1'b1;
assign n9 = 1'b1;
assign n10 = 1'b1;
assign n11 = 1'b0;
assign n12 = 1'b0;
assign n13 = {i1, n14};
initial n14 = 1'b0;
always @ (posedge clock_c)
  if (i3 == 1'b1)
    n14 <= 1'b0;
  else if (i2 == 1'b1)
    n14 <= s15_1;
cf_fft_1024_18_26 s15 (n1, n2, n3, n4, n5, n6, n13, s15_1);
cf_fft_1024_18_26 s16 (n7, n8, n9, n10, n11, n12, n13, s16_1);
assign o1 = s16_1;
endmodule

module cf_fft_1024_18_26 (i1, i2, i3, i4, i5, i6, i7, o1);
input  i1;
input  i2;
input  i3;
input  i4;
input  i5;
input  i6;
input  [2:0] i7;
output o1;
wire   [2:0] n1;
wire   [2:0] n2;
wire   [2:0] n3;
wire   n4;
wire   n5;
wire   n6;
wire   n7;
wire   n8;
wire   n9;
wire   s10_1;
assign n1 = 3'b000;
assign n2 = 3'b010;
assign n3 = 3'b100;
assign n4 = i7 == n1;
assign n5 = i7 == n2;
assign n6 = i7 == n3;
assign n7 = n6 ? i4 : s10_1;
assign n8 = n5 ? i5 : n7;
assign n9 = n4 ? i6 : n8;
cf_fft_1024_18_27 s10 (i1, i2, i3, i7, s10_1);
assign o1 = n9;
endmodule

module cf_fft_1024_18_27 (i1, i2, i3, i4, o1);
input  i1;
input  i2;
input  i3;
input  [2:0] i4;
output o1;
wire   [2:0] n1;
wire   [2:0] n2;
wire   [2:0] n3;
wire   n4;
wire   n5;
wire   n6;
wire   n7;
wire   n8;
wire   n9;
wire   n10;
assign n1 = 3'b110;
assign n2 = 3'b001;
assign n3 = 3'b011;
assign n4 = i4 == n1;
assign n5 = i4 == n2;
assign n6 = i4 == n3;
assign n7 = n6 ? i1 : n10;
assign n8 = n5 ? i2 : n7;
assign n9 = n4 ? i3 : n8;
assign n10 = 1'b1;
assign o1 = n9;
endmodule

module cf_fft_1024_18_28 (clock_c, i1, i2, i3, i4, i5, i6, o1, o2, o3);
input  clock_c;
input  [71:0] i1;
input  i2;
input  [7:0] i3;
input  i4;
input  i5;
input  i6;
output o1;
output o2;
output [71:0] o3;
wire   [7:0] n1;
wire   [7:0] n2;
reg    [7:0] n3;
wire   n4;
reg    n5;
wire   [7:0] n6;
wire   n7;
wire   n8;
wire   [71:0] n9;
reg    [7:0] n9a;
reg    [71:0] n9m [255:0];
wire   n10;
wire   [71:0] n11;
reg    [7:0] n11a;
reg    [71:0] n11m [255:0];
reg    n12;
wire   [71:0] n13;
wire   n14;
wire   s15_1;
assign n1 = 8'b00000001;
assign n2 = n3 + n1;
initial n3 = 8'b00000000;
always @ (posedge clock_c)
  if (n14 == 1'b1)
    n3 <= 8'b00000000;
  else if (i5 == 1'b1)
    n3 <= n2;
assign n4 = ~s15_1;
initial n5 = 1'b0;
always @ (posedge clock_c)
  if (i6 == 1'b1)
    n5 <= 1'b0;
  else if (i5 == 1'b1)
    n5 <= i2;
assign n6 = 8'b00000000;
assign n7 = n3 == n6;
assign n8 = i4 & n4;
initial n9a = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1) begin
    if (n8 == 1'b1)
      n9m[i3] <= i1;
    n9a <= n3;
  end
assign n9 = n9m[n9a];
assign n10 = i4 & s15_1;
initial n11a = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1) begin
    if (n10 == 1'b1)
      n11m[i3] <= i1;
    n11a <= n3;
  end
assign n11 = n11m[n11a];
initial n12 = 1'b0;
always @ (posedge clock_c)
  if (i6 == 1'b1)
    n12 <= 1'b0;
  else if (i5 == 1'b1)
    n12 <= n4;
assign n13 = n12 ? n11 : n9;
assign n14 = i2 | i6;
cf_fft_1024_18_30 s15 (clock_c, i2, i5, i6, s15_1);
assign o3 = n13;
assign o2 = n7;
assign o1 = n5;
endmodule

module cf_fft_1024_18_29 (clock_c, i1, i2, i3, i4, i5, i6, o1);
input  clock_c;
input  [71:0] i1;
input  i2;
input  [7:0] i3;
input  i4;
input  i5;
input  i6;
output [71:0] o1;
wire   [7:0] n1;
wire   [7:0] n2;
reg    [7:0] n3;
wire   n4;
wire   n5;
wire   [71:0] n6;
reg    [7:0] n6a;
reg    [71:0] n6m [255:0];
wire   n7;
wire   [71:0] n8;
reg    [7:0] n8a;
reg    [71:0] n8m [255:0];
reg    n9;
wire   [71:0] n10;
wire   n11;
wire   s12_1;
assign n1 = 8'b00000001;
assign n2 = n3 + n1;
initial n3 = 8'b00000000;
always @ (posedge clock_c)
  if (n11 == 1'b1)
    n3 <= 8'b00000000;
  else if (i5 == 1'b1)
    n3 <= n2;
assign n4 = ~s12_1;
assign n5 = i4 & n4;
initial n6a = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1) begin
    if (n5 == 1'b1)
      n6m[i3] <= i1;
    n6a <= n3;
  end
assign n6 = n6m[n6a];
assign n7 = i4 & s12_1;
initial n8a = 8'b00000000;
always @ (posedge clock_c)
  if (i5 == 1'b1) begin
    if (n7 == 1'b1)
      n8m[i3] <= i1;
    n8a <= n3;
  end
assign n8 = n8m[n8a];
initial n9 = 1'b0;
always @ (posedge clock_c)
  if (i6 == 1'b1)
    n9 <= 1'b0;
  else if (i5 == 1'b1)
    n9 <= n4;
assign n10 = n9 ? n8 : n6;
assign n11 = i2 | i6;
cf_fft_1024_18_30 s12 (clock_c, i2, i5, i6, s12_1);
assign o1 = n10;
endmodule

module cf_fft_1024_18_30 (clock_c, i1, i2, i3, o1);
input  clock_c;
input  i1;
input  i2;
input  i3;
output o1;
wire   n1;
wire   n2;
wire   n3;
wire   n4;
wire   [1:0] n5;
reg    n6;
wire   s7_1;
wire   s8_1;
assign n1 = 1'b0;
assign n2 = 1'b1;
assign n3 = 1'b1;
assign n4 = 1'b0;
assign n5 = {i1, n6};
initial n6 = 1'b0;
always @ (posedge clock_c)
  if (i3 == 1'b1)
    n6 <= 1'b0;
  else if (i2 == 1'b1)
    n6 <= s7_1;
cf_fft_1024_18_32 s7 (n1, n2, n3, n4, n5, s7_1);
cf_fft_1024_18_31 s8 (n5, s8_1);
assign o1 = s8_1;
endmodule

module cf_fft_1024_18_31 (i1, o1);
input  [1:0] i1;
output o1;
wire   n1;
wire   n2;
wire   [1:0] n3;
wire   [1:0] n4;
wire   n5;
wire   n6;
wire   n7;
wire   n8;
wire   n9;
assign n1 = 1'b0;
assign n2 = 1'b0;
assign n3 = 2'b00;
assign n4 = 2'b10;
assign n5 = i1 == n3;
assign n6 = i1 == n4;
assign n7 = n6 ? n1 : n9;
assign n8 = n5 ? n2 : n7;
assign n9 = 1'b1;
assign o1 = n8;
endmodule

module cf_fft_1024_18_32 (i1, i2, i3, i4, i5, o1);
input  i1;
input  i2;
input  i3;
input  i4;
input  [1:0] i5;
output o1;
wire   [1:0] n1;
wire   [1:0] n2;
wire   [1:0] n3;
wire   n4;
wire   n5;
wire   n6;
wire   n7;
wire   n8;
wire   n9;
assign n1 = 2'b00;
assign n2 = 2'b10;
assign n3 = 2'b01;
assign n4 = i5 == n1;
assign n5 = i5 == n2;
assign n6 = i5 == n3;
assign n7 = n6 ? i2 : i1;
assign n8 = n5 ? i3 : n7;
assign n9 = n4 ? i4 : n8;
assign o1 = n9;
endmodule

module cf_fft_1024_18_33 (clock_c, i1, i2, i3, o1);
input  clock_c;
input  [1:0] i1;
input  i2;
input  i3;
output o1;
wire   [2:0] n1;
wire   [2:0] n2;
wire   n3;
wire   n4;
reg    n5;
wire   s6_1;
wire   s7_1;
wire   s7_2;
wire   s7_3;
wire   s7_4;
wire   s7_5;
wire   s7_6;
wire   s7_7;
wire   s7_8;
wire   s8_1;
assign n1 = 3'b000;
assign n2 = {i1, n5};
assign n3 = n2 == n1;
assign n4 = n3 ? s7_8 : s6_1;
initial n5 = 1'b0;
always @ (posedge clock_c)
  if (i3 == 1'b1)
    n5 <= 1'b0;
  else if (i2 == 1'b1)
    n5 <= n4;
cf_fft_1024_18_37 s6 (s7_1, s7_2, s7_3, s7_4, s7_5, s7_6, s7_7, n2, s6_1);
cf_fft_1024_18_36 s7 (s7_1, s7_2, s7_3, s7_4, s7_5, s7_6, s7_7, s7_8);
cf_fft_1024_18_34 s8 (n2, s8_1);
assign o1 = s8_1;
endmodule

module cf_fft_1024_18_34 (i1, o1);
input  [2:0] i1;
output o1;
wire   n1;
wire   n2;
wire   n3;
wire   n4;
wire   [2:0] n5;
wire   n6;
wire   n7;
wire   s8_1;
assign n1 = 1'b0;
assign n2 = 1'b0;
assign n3 = 1'b0;
assign n4 = 1'b0;
assign n5 = 3'b000;
assign n6 = i1 == n5;
assign n7 = n6 ? n4 : s8_1;
cf_fft_1024_18_35 s8 (n1, n2, n3, i1, s8_1);
assign o1 = n7;
endmodule

module cf_fft_1024_18_35 (i1, i2, i3, i4, o1);
input  i1;
input  i2;
input  i3;
input  [2:0] i4;
output o1;
wire   [2:0] n1;
wire   [2:0] n2;
wire   [2:0] n3;
wire   n4;
wire   n5;
wire   n6;
wire   n7;
wire   n8;
wire   n9;
wire   n10;
assign n1 = 3'b010;
assign n2 = 3'b100;
assign n3 = 3'b110;
assign n4 = i4 == n1;
assign n5 = i4 == n2;
assign n6 = i4 == n3;
assign n7 = n6 ? i1 : n10;
assign n8 = n5 ? i2 : n7;
assign n9 = n4 ? i3 : n8;
assign n10 = 1'b1;
assign o1 = n9;
endmodule

module cf_fft_1024_18_36 (o1, o2, o3, o4, o5, o6, o7, o8);
output o1;
output o2;
output o3;
output o4;
output o5;
output o6;
output o7;
output o8;
wire   n1;
wire   n2;
wire   n3;
wire   n4;
wire   n5;
wire   n6;
wire   n7;
wire   n8;
assign n1 = 1'b0;
assign n2 = 1'b1;
assign n3 = 1'b0;
assign n4 = 1'b1;
assign n5 = 1'b0;
assign n6 = 1'b1;
assign n7 = 1'b0;
assign n8 = 1'b0;
assign o8 = n8;
assign o7 = n7;
assign o6 = n6;
assign o5 = n5;
assign o4 = n4;
assign o3 = n3;
assign o2 = n2;
assign o1 = n1;
endmodule

module cf_fft_1024_18_37 (i1, i2, i3, i4, i5, i6, i7, i8, o1);
input  i1;
input  i2;
input  i3;
input  i4;
input  i5;
input  i6;
input  i7;
input  [2:0] i8;
output o1;
wire   [2:0] n1;
wire   [2:0] n2;
wire   [2:0] n3;
wire   n4;
wire   n5;
wire   n6;
wire   n7;
wire   n8;
wire   n9;
wire   s10_1;
assign n1 = 3'b010;
assign n2 = 3'b100;
assign n3 = 3'b110;
assign n4 = i8 == n1;
assign n5 = i8 == n2;
assign n6 = i8 == n3;
assign n7 = n6 ? i5 : s10_1;
assign n8 = n5 ? i6 : n7;
assign n9 = n4 ? i7 : n8;
cf_fft_1024_18_38 s10 (i1, i2, i3, i4, i8, s10_1);
assign o1 = n9;
endmodule

module cf_fft_1024_18_38 (i1, i2, i3, i4, i5, o1);
input  i1;
input  i2;
input  i3;
input  i4;
input  [2:0] i5;
output o1;
wire   [2:0] n1;
wire   [2:0] n2;
wire   [2:0] n3;
wire   n4;
wire   n5;
wire   n6;
wire   n7;
wire   n8;
wire   n9;
assign n1 = 3'b001;
assign n2 = 3'b011;
assign n3 = 3'b101;
assign n4 = i5 == n1;
assign n5 = i5 == n2;
assign n6 = i5 == n3;
assign n7 = n6 ? i2 : i1;
assign n8 = n5 ? i3 : n7;
assign n9 = n4 ? i4 : n8;
assign o1 = n9;
endmodule

module cf_fft_1024_18_39 (clock_c, i1, i2, i3, i4, i5, o1, o2);
input  clock_c;
input  [35:0] i1;
input  [35:0] i2;
input  i3;
input  i4;
input  i5;
output [35:0] o1;
output [35:0] o2;
reg    [35:0] n1;
wire   [17:0] n2;
wire   [17:0] n3;
reg    [35:0] n4;
wire   [17:0] n5;
wire   [17:0] n6;
reg    [17:0] n7;
reg    [17:0] n8;
reg    [17:0] n9;
reg    [17:0] n10;
reg    [35:0] n11;
wire   [17:0] n12;
wire   [17:0] n13;
wire   [35:0] n14;
wire   [17:0] n15;
reg    [17:0] n16;
wire   [35:0] n17;
wire   [17:0] n18;
reg    [17:0] n19;
wire   [17:0] n20;
reg    [17:0] n21;
wire   [35:0] n22;
wire   [17:0] n23;
reg    [17:0] n24;
wire   [35:0] n25;
wire   [17:0] n26;
reg    [17:0] n27;
wire   [17:0] n28;
reg    [17:0] n29;
wire   [17:0] n30;
wire   [17:0] n31;
wire   [35:0] n32;
reg    [35:0] n33;
wire   [17:0] n34;
wire   [17:0] n35;
wire   [35:0] n36;
reg    [35:0] n37;
initial n1 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n1 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n1 <= i1;
assign n2 = {n1[35],
  n1[34],
  n1[33],
  n1[32],
  n1[31],
  n1[30],
  n1[29],
  n1[28],
  n1[27],
  n1[26],
  n1[25],
  n1[24],
  n1[23],
  n1[22],
  n1[21],
  n1[20],
  n1[19],
  n1[18]};
assign n3 = {n1[17],
  n1[16],
  n1[15],
  n1[14],
  n1[13],
  n1[12],
  n1[11],
  n1[10],
  n1[9],
  n1[8],
  n1[7],
  n1[6],
  n1[5],
  n1[4],
  n1[3],
  n1[2],
  n1[1],
  n1[0]};
initial n4 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n4 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n4 <= i2;
assign n5 = {n4[35],
  n4[34],
  n4[33],
  n4[32],
  n4[31],
  n4[30],
  n4[29],
  n4[28],
  n4[27],
  n4[26],
  n4[25],
  n4[24],
  n4[23],
  n4[22],
  n4[21],
  n4[20],
  n4[19],
  n4[18]};
assign n6 = {n4[17],
  n4[16],
  n4[15],
  n4[14],
  n4[13],
  n4[12],
  n4[11],
  n4[10],
  n4[9],
  n4[8],
  n4[7],
  n4[6],
  n4[5],
  n4[4],
  n4[3],
  n4[2],
  n4[1],
  n4[0]};
initial n7 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n7 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n7 <= n2;
initial n8 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n8 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n8 <= n7;
initial n9 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n9 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n9 <= n3;
initial n10 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n10 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n10 <= n9;
initial n11 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i4 == 1'b1)
    case (i3)
      1'b0 : n11 <= 36'b011111111111111111000000000000000000;
      1'b1 : n11 <= 36'b000000000000000000100000000000000000;
      default : n11 <= 36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    endcase
assign n12 = {n11[35],
  n11[34],
  n11[33],
  n11[32],
  n11[31],
  n11[30],
  n11[29],
  n11[28],
  n11[27],
  n11[26],
  n11[25],
  n11[24],
  n11[23],
  n11[22],
  n11[21],
  n11[20],
  n11[19],
  n11[18]};
assign n13 = {n11[17],
  n11[16],
  n11[15],
  n11[14],
  n11[13],
  n11[12],
  n11[11],
  n11[10],
  n11[9],
  n11[8],
  n11[7],
  n11[6],
  n11[5],
  n11[4],
  n11[3],
  n11[2],
  n11[1],
  n11[0]};
assign n14 = {{18{n5[17]}}, n5} * {{18{n12[17]}}, n12};
assign n15 = {n14[34],
  n14[33],
  n14[32],
  n14[31],
  n14[30],
  n14[29],
  n14[28],
  n14[27],
  n14[26],
  n14[25],
  n14[24],
  n14[23],
  n14[22],
  n14[21],
  n14[20],
  n14[19],
  n14[18],
  n14[17]};
initial n16 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n16 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n16 <= n15;
assign n17 = {{18{n6[17]}}, n6} * {{18{n13[17]}}, n13};
assign n18 = {n17[34],
  n17[33],
  n17[32],
  n17[31],
  n17[30],
  n17[29],
  n17[28],
  n17[27],
  n17[26],
  n17[25],
  n17[24],
  n17[23],
  n17[22],
  n17[21],
  n17[20],
  n17[19],
  n17[18],
  n17[17]};
initial n19 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n19 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n19 <= n18;
assign n20 = n16 - n19;
initial n21 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n21 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n21 <= n20;
assign n22 = {{18{n5[17]}}, n5} * {{18{n13[17]}}, n13};
assign n23 = {n22[34],
  n22[33],
  n22[32],
  n22[31],
  n22[30],
  n22[29],
  n22[28],
  n22[27],
  n22[26],
  n22[25],
  n22[24],
  n22[23],
  n22[22],
  n22[21],
  n22[20],
  n22[19],
  n22[18],
  n22[17]};
initial n24 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n24 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n24 <= n23;
assign n25 = {{18{n6[17]}}, n6} * {{18{n12[17]}}, n12};
assign n26 = {n25[34],
  n25[33],
  n25[32],
  n25[31],
  n25[30],
  n25[29],
  n25[28],
  n25[27],
  n25[26],
  n25[25],
  n25[24],
  n25[23],
  n25[22],
  n25[21],
  n25[20],
  n25[19],
  n25[18],
  n25[17]};
initial n27 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n27 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n27 <= n26;
assign n28 = n24 + n27;
initial n29 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n29 <= 18'b000000000000000000;
  else if (i4 == 1'b1)
    n29 <= n28;
assign n30 = n8 + n21;
assign n31 = n10 + n29;
assign n32 = {n30, n31};
initial n33 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n33 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n33 <= n32;
assign n34 = n8 - n21;
assign n35 = n10 - n29;
assign n36 = {n34, n35};
initial n37 = 36'b000000000000000000000000000000000000;
always @ (posedge clock_c)
  if (i5 == 1'b1)
    n37 <= 36'b000000000000000000000000000000000000;
  else if (i4 == 1'b1)
    n37 <= n36;
assign o2 = n37;
assign o1 = n33;
endmodule

